// Code generated by go-bindata.
// sources:
// bpf/netcost-bpf.o
// DO NOT EDIT!

package netcostdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _netcostBpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9b\x7b\x90\x1c\xc5\x7d\xc7\xbf\xb3\xaf\xdb\xbb\x9d\x9b\x3b\x71\xba\x97\x04\x62\x64\x84\x74\x07\xf7\x94\x4e\xa7\x93\x84\x9e\xa0\xc7\x89\x8b\x74\x08\x41\x24\x61\x18\xcd\xee\xce\xde\x0e\xbb\xb7\xbb\xde\x99\x3b\xee\x40\x20\x99\x92\xf0\xe1\x40\x2c\xb0\x09\x84\xa4\xb0\x8c\x53\x89\xec\x22\x41\xa9\xe0\xe0\x18\x12\x54\x54\x1c\xe3\x38\xef\x90\x14\x89\x1f\x89\x43\x48\x11\x87\x94\x81\x54\x82\x12\x43\x5d\xea\xd7\xd3\xb3\xd3\x37\xba\x06\x92\xf2\x7f\x9e\x2a\x6d\xf7\xe7\xdb\xbf\x5f\x77\x4f\xbf\x66\xba\xe7\x74\x62\xd7\xd8\xee\x88\xa2\xc0\xbf\x14\xbc\x87\x80\x82\x6b\xa0\x27\x88\x6f\xe7\xbf\xed\x50\xf0\x52\x9b\xa7\x75\x01\x50\x01\xdc\x82\x35\x40\x12\x78\x5e\x01\x74\x00\x99\x65\x17\xe7\x29\xfd\xa5\x2f\x7b\x76\x75\x51\xe0\xfd\xf9\xf9\x79\xd3\x8c\x31\xbe\x45\x49\x82\x62\x2f\x99\x5e\xfa\xf3\x11\x60\x05\x85\x31\x30\xfd\x34\x80\x65\x00\x26\xe0\xe5\xf7\x2d\x1e\x5a\xa8\xc7\xfc\xfc\xfc\x7c\x1c\x9d\xcc\x4f\xf4\x5f\xf6\x31\xfc\x9f\xe7\x37\x39\xa9\x2c\xf1\xfc\x9f\xe6\xf5\x8b\x00\x17\xe7\xe7\xe7\x3b\x42\x8d\x70\x9a\xb5\x0d\xd0\x8a\x14\xe3\xa0\xfe\x71\x56\x8e\xc9\xcb\xff\x6e\x73\xd2\xab\x87\xe2\xd9\x7f\xb7\xb9\x99\xb1\x67\x25\xda\x21\x64\xd7\xe1\x31\x2f\xef\x31\x1e\x52\x69\x49\x5e\x67\x70\xdb\x3d\xe3\x63\xc8\x14\xcd\xd2\x84\x3e\x6d\x55\x1d\xbb\x5c\xd2\x37\xf6\x0d\xf4\x0d\xea\x5d\xbb\xad\x6c\xb9\x6a\x7a\xd4\xbb\xb6\x2f\x97\x59\x37\xd8\x8d\x74\x25\xd7\x5f\xb2\xdc\x4c\xd9\x71\x7b\xd3\x95\x5c\x5f\x06\xfd\xf9\xf2\xa4\xd5\x6f\x16\xd3\x66\xa9\x7f\xa2\xdc\xef\x54\x33\xfd\x13\xb6\x9b\x9f\x4a\xf7\x65\xca\x93\xfd\x05\xbb\x34\x5d\x2e\x16\x7c\x1f\x14\x2b\x93\x86\xe3\x9a\xae\x03\x77\xb6\x62\x61\xaa\xe4\xd8\x13\x25\x2b\xab\xdb\x25\x17\x05\x6b\xd6\x70\xec\xbb\x2d\x4c\x9b\xc5\x29\xcb\x8b\x4e\x9a\x33\x86\x55\x72\xab\xb6\xe5\x60\xd2\xac\x18\xb9\xa2\x39\xe1\x50\x2d\x0c\xa2\xac\x95\x83\x51\xb4\x33\x56\xc9\xb1\x90\xc9\x9b\x55\x18\xc6\x8e\x83\x07\x77\x1c\x31\x6e\x1e\x3d\xba\xcb\x38\x74\x64\x7c\x97\x61\x30\x6b\xa7\x90\x36\x8a\x65\x33\x6b\xa4\x67\x5d\xcb\x01\x15\x67\x18\x53\xeb\xd6\xd6\xb2\x2a\x96\xcb\x85\xa9\x8a\x61\x15\xad\x49\xa6\x55\xaa\xe5\x89\x41\x56\xdd\x82\x35\x0b\xa7\x90\x46\xd1\x2a\xa1\x52\x70\x0d\x56\xf1\x49\xb3\x5a\xc0\xa7\xa6\xac\x29\x8b\xbc\x2b\x76\x69\x02\x95\x6a\xd9\x2d\x67\xca\x45\x4c\x17\xcd\x92\x51\xa9\x5a\x8e\x55\x72\x3d\x70\x33\xb6\xaf\x96\xdd\x32\x2a\x55\xbb\x5c\xb5\xdd\x59\xd8\xa5\x89\xaa\xe5\x38\x86\x9d\xb3\x4b\x59\x6b\x06\x7e\xe8\x66\x0c\x2f\x92\x49\x23\x6f\x3a\x79\x12\x32\x45\xd3\x71\xec\x2c\xb2\xa6\x6b\xb2\x1f\xc3\x2a\x65\x51\x32\x2b\xb6\x61\x67\x91\x33\x27\xed\xe2\x2c\xaa\xd6\x64\xd9\xb5\x0c\xbb\x32\x84\x62\x39\x63\x16\x59\xac\x26\x0e\xd7\xc4\x61\x5f\xac\x94\xab\x2e\x57\x59\x94\x65\x3c\x69\xb9\x26\x72\xc5\xf2\x5d\x74\xef\x0e\x4a\xf9\x72\x2e\x17\x74\x95\x93\x27\x43\xc3\x98\x1a\x1c\x86\xcb\x92\xcc\x6c\xb6\xca\x6f\xcd\x76\x8c\x5c\xd5\x9c\x08\xac\x79\xaf\x4c\x8d\xb0\x24\xbb\xea\xb8\x9e\x81\xed\x18\x56\x29\x63\x56\x60\x57\xb8\xab\xdf\x3a\x86\x91\xb6\x06\x87\xe1\x78\xf5\x61\xbf\x76\x65\x7a\xc8\x70\xaa\x19\x96\xb6\x6e\xad\xc7\x59\x87\x25\x0c\xb3\x04\x16\x21\xc5\x1b\x20\xac\xf2\x45\x33\x6d\x15\x59\x67\x06\xf7\xe2\x3a\xae\x39\x59\x41\xb1\x5c\x9a\xd0\xd9\xcf\x82\x11\x68\x18\x53\xc3\x43\xb8\xcb\xae\x5a\x06\xf5\xf6\x84\x53\x36\x1c\x6b\xc2\x81\x53\x40\xba\x3c\x55\xca\x1a\x59\x6b\xda\xb0\x73\x70\xaa\x19\xd6\xb2\x5e\x38\xcc\x42\xaf\xba\x8e\x1b\x44\xc8\xc2\x0b\x87\x41\x63\xde\xf2\x46\x62\x39\x53\x80\x61\x38\x05\x23\x3d\x95\xcb\xa1\x6a\xb9\xde\x78\x07\x1b\x99\x46\xd5\xca\x4c\xf3\x28\x1b\x3f\x15\x33\x53\xb0\xdc\x10\x30\xa3\x8c\x9d\xad\xf2\xb9\xe4\x5f\xc9\xda\xba\x7b\x93\x1f\x3d\xa6\xf8\xd2\xad\xe1\x55\x38\xcf\xc3\x4a\xcd\x6b\x3c\x6c\x72\x8e\x87\xe7\xe5\x26\x6f\xf3\x70\x5c\x91\x9a\x28\x4b\x94\xab\xb5\x96\x78\x54\x6b\x6e\x5f\xae\x2d\x51\x2e\x4b\x00\x91\x21\x44\xb5\xd1\x96\x6d\x9d\x9b\x52\x9b\x53\x91\x0e\x20\xda\xa2\x44\xb5\x54\x8a\x10\x88\x35\xb2\x54\x82\x91\x14\x10\x5f\x85\xa8\xb6\x35\x95\x4a\x01\x09\x45\x19\x6d\x01\xea\x56\x62\xb4\x65\x43\x0a\x48\x52\x52\x2a\xb5\x35\x05\xd4\x0f\xf9\x4e\x71\xa0\xa1\x09\x64\x97\x6a\x55\x46\x5b\xd6\x74\x02\x6a\x9c\x71\xe3\x6a\x00\x5a\x1b\x46\x5b\xa2\x9a\x57\x54\x53\x13\x80\xe6\x9a\x6b\x0a\x58\xd2\xa7\x50\x1d\xb7\x77\x78\x26\x6b\x3a\xa9\x9a\xc0\x65\x71\x44\xda\x3d\x89\x72\x6a\x19\x42\xa4\x23\xc0\xa5\x43\xb8\xbc\x29\xc0\xd6\xa1\x05\xc6\x6d\x29\xc5\xbb\xed\xf6\xda\x5d\xc6\x81\x8e\xda\x5d\xc6\xe9\x2e\x3b\x1b\xe1\xc1\x9c\xd2\x44\xbc\xac\x5d\xf1\x2c\xe7\x94\x26\x60\xb9\x9f\x4a\x49\x97\xfb\x49\xc0\x15\x2d\xb5\x28\xbe\x1f\x07\x7f\x30\x24\x59\x67\xa8\xe1\x8e\xa8\x8d\x88\x08\x45\xb6\x01\x88\xb4\xd6\x47\xfd\x04\x16\x59\xaa\xac\x62\x59\x9c\xa2\x7e\xbb\x1a\x41\x7c\x75\x2c\x88\xaf\x49\x06\xf1\x2e\x35\x88\x77\x37\x83\xea\x81\xba\x18\x2b\xe0\x2c\x15\xb0\x2b\x28\x20\xf1\x0c\xa5\xfd\x0e\xa8\x96\xcc\x2e\xa1\xb0\x61\x9a\xac\xab\xa7\xe0\x8f\x28\xe1\xd9\x48\xc3\x77\xe8\x49\xf5\x06\xd5\xff\x2d\xfa\x79\x97\x7e\x3e\xf0\x63\x9e\x63\x3c\xd6\xf0\x0e\x80\x46\xed\x94\x5f\xf7\xe5\x4d\xec\x19\x58\xaf\x00\xb1\x95\x0d\x9a\x02\xa4\x3e\xa8\x39\x52\x3e\x58\x22\x36\x80\x72\x94\x62\x91\x15\x54\xcc\x65\x7e\x42\x64\xc5\xef\x2a\x40\x4b\xe4\x11\x8f\xae\xfe\xaa\x02\x2c\xd5\x58\x5c\x7f\x2d\x06\xb4\x1e\xf7\x0d\x57\x3f\x1d\x07\xda\xf6\x72\xa4\x57\x98\xd6\x61\x3f\xed\x5a\xca\x13\x6d\x73\x62\xe2\x11\x3f\x71\xe0\x0d\xaf\x25\xde\xf5\x5b\x22\x82\x86\x17\x14\xa0\x9d\xcd\xb2\xf8\x80\xca\x1e\xdc\x94\x1a\x1f\x54\x11\xc0\x5a\x35\x16\xc0\x3a\x35\x19\xc0\x90\x2a\xf8\xac\x57\x9b\x03\x18\x56\x97\x06\xb0\x41\xed\x08\x60\x44\xbd\x3c\x80\x8d\xaa\x1e\xc0\x26\x75\x55\x00\x9b\xd5\xae\x00\xae\x53\x7b\x18\xdc\x1d\x05\xe2\x5b\xd4\x81\x20\x65\xab\x7a\x43\x00\xdb\xd4\xbd\x01\x6c\x57\xc7\x02\xd8\xa1\x8e\x07\xb0\x53\x3d\x14\xc0\x2e\xf5\x70\x00\xbb\xd5\x4f\x06\xb0\x47\x3d\xc6\xe0\x01\x2a\x74\xaf\x9a\x0d\x60\x54\x75\x03\xb3\x7d\xea\xa9\x00\x6e\x54\xe7\x02\xd8\xaf\x3e\xd4\xa9\x93\xfd\x01\x35\x79\x66\x59\x92\x02\x96\xf8\xa8\xa7\xc1\x6b\x62\xea\xdc\xf8\xb8\xfa\x44\xe0\x77\x93\x7a\x36\x80\x83\xea\xaf\x75\x5a\xe4\x70\xb3\x9a\x3c\xb7\x2c\x49\x01\x4b\xfc\x51\x8c\x69\x0b\xfa\x33\x2e\xc4\x63\x68\x78\x3c\xca\xfb\x76\x24\xee\x6a\xcc\xe9\x29\x72\x9a\xd2\x10\xc0\xb4\x16\x09\xe0\x2e\xcd\xeb\xe8\xf3\x04\x33\x5a\x22\x80\x59\xad\x2e\x80\xbb\xb5\x64\x00\xf7\x68\xf5\x0c\x5e\x26\x38\xae\x35\x04\x70\xaf\xa6\x06\x70\x9f\xa6\x2d\xbf\x96\x22\x27\xb4\xe6\xcb\xf5\xf8\x09\x6d\xf9\x46\xa2\x93\x1a\xae\x48\xc6\x4f\x7a\xb5\xfb\x53\x52\x3e\xcd\x6b\xc7\xe0\x7e\x2d\x86\xe5\x69\x8a\x9d\xd2\x70\x85\x1e\x3f\xa5\x05\x9d\x70\x9a\x1b\x32\x78\x40\x6b\x86\x30\x62\x1f\xd4\x06\x82\x4c\x3e\xab\x0d\x41\xfb\x4a\x8c\xcf\xd5\x0e\x6f\x91\x88\x68\x2f\xf8\x4a\x2b\x53\x92\x8a\xf6\x14\x57\x12\x9d\xda\xbb\xfe\xaa\xb1\x5c\x7b\xdd\xb7\xbb\xd2\xf3\x4c\x36\xfc\x38\xc6\xdb\x75\x2c\x3e\x27\x8c\xff\x07\xc5\x39\xf3\x59\x71\xce\xfc\x82\x38\x67\x1e\x12\xe7\xcc\xc3\xe2\x9c\xf9\x45\x71\xce\x9c\xe1\x73\x86\xdd\xde\x23\xe2\x9c\x79\x94\x4f\x06\x06\x9f\x17\x27\xc3\x17\xd4\xa1\xc0\xe7\x31\x75\x24\x48\xf9\x25\x75\x2f\x1a\x7e\x23\xce\xd7\x59\xbd\xce\x5b\x4f\x69\xe8\xd5\xf1\xf7\x79\x16\x4f\x24\x83\x78\x5d\x73\x10\x67\xd5\xff\xe2\xbf\x29\xde\x0d\x02\x38\x14\xf5\xfe\x9d\x8d\xa1\xb6\x80\x45\xf8\xc6\xe2\x4a\x20\x76\x9e\xbf\xf0\xfb\xcb\x6f\x13\x8f\xd3\xcb\x7f\x07\x8f\xd3\xe2\x74\x05\x8f\x1f\x03\x70\x2d\x8f\x9f\x04\x30\xc4\xe3\xb4\x8a\xef\xe0\xf1\x0b\x00\xf6\xf1\xf8\x3f\xb2\x0d\x1a\xcf\x5f\x01\xee\xf0\xf3\x57\x80\x92\x9f\xbf\x02\x4c\xfb\xf9\x2b\xc0\x09\xbe\x80\x9f\x54\x80\xfb\x7d\xfb\x08\xf0\x19\xdf\x3e\x02\x3c\xea\xdb\x47\x80\xc7\xfd\xfa\x44\xbc\x7a\xb0\xfa\x44\xbc\xf7\x12\x56\x9f\x08\xf0\xac\x5f\x9f\x08\xf0\x0d\xbf\x3e\x51\xe0\x0f\x69\xa4\x50\xfe\x51\xe0\xcf\x79\xfc\x6c\x14\xf8\x3b\xbf\xdc\x18\xf0\x86\x5f\x6e\xcc\x7b\x91\x61\xe5\xf2\xf6\xa4\x47\xd3\xc9\x18\xf0\x3f\x00\x1a\xa8\xac\x18\x40\x7b\x5b\x96\x3f\xbd\x62\xf0\xb8\x1e\xf7\xec\x69\x1d\xd8\x1e\x07\x5a\xbc\x17\x21\xd6\x8d\x9d\x5e\x5c\x89\xf9\x9b\x2e\x3e\x8e\xfd\x9f\x04\x6f\x8f\xd5\x1f\xc3\xce\xef\x66\x05\x88\x53\xdd\x36\x29\x40\x3d\x16\x5c\x6c\x1d\xb9\x81\x97\x4f\x7d\xbf\x8f\xe7\x9b\xac\x6d\xb4\x03\x7f\x53\x01\x1a\x43\xfe\x9d\x81\x4d\x23\x8d\x97\x2c\xdf\x24\xe6\x17\xd6\x4f\x29\x7a\xac\xd2\xc3\xb1\x3b\xc6\xee\x21\xb6\x14\xc0\xfa\x58\x50\xcf\x4d\x3c\x4e\xf7\x73\x3d\x8f\x53\x1d\xf6\xf3\x38\x8d\xb7\xa3\x3c\x4e\xe3\x2d\xeb\x39\x6a\x4b\xf8\x18\x2e\x79\xcc\x8e\x13\x92\xa8\x9d\x23\xb0\x36\x69\x11\xda\xc4\xe1\x7e\x4b\xb9\xdf\xf1\x18\x0b\xa9\xfa\x68\xe5\x4e\x64\x72\x4a\xd0\xfd\x47\x3e\xf9\x3c\xe8\xf9\xd3\xf0\xc0\xe3\x42\x5c\x78\x49\xff\x19\xdb\xfa\xf1\x4d\xd2\xa5\xfb\x20\x6f\xcb\x1c\xda\x32\x5d\xba\xe1\x0e\xb6\x5b\xde\x86\x4a\xb2\xdb\x72\x0a\x6c\x5f\x4d\xd1\x60\xc7\x4d\xdb\x23\xcb\x1d\xfc\xbf\x1d\x2b\xf4\x5f\x7a\x2c\x61\x97\x5c\xbd\x96\x6b\x97\xe3\x56\xa7\x32\xae\x5e\xeb\x51\xfd\x1a\xa7\x90\xee\x46\xbd\x9d\xd3\xbb\xd8\xb1\x40\xde\x2c\xe6\xba\x9c\x42\xba\x47\x2f\xe7\x72\x8e\xe5\x96\x73\xbe\x8f\xe5\xe6\xf3\xd9\x6a\x8f\x9e\xf7\x7a\xb0\xbb\x5b\x5f\xb9\x45\xdf\x75\x68\xaf\x31\x6e\x8c\x8e\x77\xa3\x9e\x1f\x11\xdc\x36\x70\xbb\xbe\x45\x5f\xb7\x76\xb3\x97\xa9\x53\x48\xf7\x6e\xf5\x87\x8c\xbe\x65\x8b\x3e\xbe\xe3\xfa\x1b\x77\x1d\x32\x0e\xdc\x72\x68\xcf\x81\xd1\xfd\x7b\xba\xf5\x7b\x50\x5f\x4f\x95\xac\x5a\xae\xbe\x45\xbf\xf4\x8c\xc2\xab\x0d\xdb\x7b\xeb\xd7\x5e\x52\x2b\xbb\xc2\x2a\x95\xa5\xad\x77\x77\x8f\xbe\xda\xaf\xc5\xe0\xed\x3d\xfa\x50\xf7\xe6\x9f\x46\xde\x8e\x34\x6f\xb6\x5f\xe5\x19\x87\xce\x4e\xba\x56\xd7\x4e\x78\x7a\x74\xee\xd8\xcd\xdb\x64\x25\xf3\xeb\x46\x7d\xbd\x61\x38\xb3\xa5\x8c\x91\xb3\xdc\x4c\xde\x30\x4b\x59\xc3\xcc\x66\xbb\x56\xb3\xe4\xde\xad\xc1\xe6\xb7\x47\x67\xcd\x58\xb4\x4a\xec\x8e\x3e\xd4\x4b\xdc\x27\xf7\xe8\x83\x1f\xed\x10\x6c\xb7\xff\x3f\xc5\x78\x7e\x54\xcc\xbd\x0b\x4e\xa3\xd8\x0a\xf1\xf1\x0f\xb2\x82\xe3\x30\xef\x9c\xc4\x3f\xcb\xf2\xc3\x49\xb3\xe2\x84\x4e\x30\x6a\x67\x08\xf4\x2e\xd0\x25\xac\x63\xf4\x6f\x4c\x09\x76\xfc\x7e\x48\x6b\xfd\xb4\x12\x2c\xa0\xcd\xfc\x1f\x69\x4b\xb9\x76\x9f\x02\xfc\x01\x19\xcc\x78\xf6\xc4\xaf\x2b\x40\x62\xce\xb3\x15\x59\xe7\xbc\x3a\x02\x34\x9e\xf5\x0e\x6b\xef\x13\x0e\x38\x47\x38\x8f\x44\x80\xd4\x39\x6f\xcd\xf7\x39\x71\x0e\xd8\xcb\xd9\x24\xff\x67\x80\x39\xce\xbf\x4f\x7c\x01\xf8\x0b\xce\x9d\x51\xa0\xe1\x55\xef\xb9\x4c\x3c\x16\x05\x12\xdf\x03\x2e\x8a\xf9\xbf\xe9\x2d\xfa\xb5\xfc\xdf\xf4\xf6\xbe\xc4\x47\xa2\xc0\xe0\x5b\x40\xb3\xc0\xd1\xb7\xbc\xf7\x13\xe2\xcf\x11\xbf\x0d\x0c\x70\xbe\x40\xf6\x17\x81\x11\x81\xa3\x17\x81\xbd\x9c\xff\x8b\xf8\x7d\xef\xa0\x83\x78\x0d\x3d\x4f\xd4\xda\x46\x7b\x7e\x7e\x7e\x3e\x86\x24\x92\xc7\x53\xb5\x66\xf5\x2f\xbf\x2b\xba\x68\x77\x8a\x97\xd8\xab\xae\xf2\x13\xad\x11\x8a\xc2\x1e\x6f\xd4\x3b\xfd\x53\x4e\xb5\xdf\x2e\x65\x8a\x53\x59\x8b\xd6\x33\xea\x68\x2c\x10\x4d\x67\xb2\x77\xc2\x2a\x59\x55\x3b\xb3\x30\xa1\x68\x97\xa6\x66\xc0\x46\x46\xde\x2a\x56\xac\xaa\xd3\x97\xa7\x3c\x17\xae\x88\x11\xd0\xa2\xd8\x5b\x2c\x0e\x0f\xf5\xe5\xe9\x31\x1a\xd8\xd3\xd0\xe5\x3e\x64\x9b\xa7\xe7\x25\x8d\x64\xc7\x8b\x8a\xf9\xe4\xd9\xd9\x41\x2c\x82\xfa\x48\xed\x2d\x65\x85\x12\x4f\x34\x5c\x95\xd0\xa3\x77\xe8\xf1\xc6\x44\xb4\x4b\x8f\x23\x11\x3d\xac\xc7\x53\x89\xe8\x35\x7d\xf1\x44\x82\xd4\x95\x9f\x49\x44\xc7\xef\x8f\x37\x24\xa2\xeb\xf5\x78\x62\x2c\x9e\xba\x8a\x25\x0c\x26\x56\xc6\xa3\x09\x3d\xd1\x1f\x1f\x1c\xe0\x11\x65\x55\x24\x02\x65\xb1\xcf\x06\xb5\xeb\x29\xf6\x48\x7f\x67\x7e\xf1\xd4\x3a\x89\x57\x1d\xae\x91\xe8\xd7\x49\xf4\x3b\x25\xba\x2b\xd1\x67\x25\xfa\x03\x12\xfd\x73\x12\xfd\x49\x89\xfe\xeb\x12\xfd\xbc\x44\x7f\x51\xa2\x7f\x53\xa2\xff\xb1\x44\xff\x81\x44\x7f\x47\xa2\xff\xa7\x44\xff\x89\x44\x6f\x5a\xb4\xb7\xeb\xfc\xd7\xe7\x4b\xf4\x95\x12\xfd\x6a\x89\xde\x2d\xd1\xd7\x4a\xf4\x0d\x12\x7d\x97\x44\xdf\x2f\xd1\x6f\x93\xe8\x59\x89\x5e\x96\xe8\x33\x12\x7d\x4e\xa2\x9f\x91\xe8\xbf\x2c\xd1\x7f\x55\xa2\x7f\x49\xa2\x3f\x23\xd1\x7f\x5b\xa2\x7f\x43\xa2\xbf\x2c\xd1\xbf\x2d\xd1\x5f\x95\xe8\x3f\x90\xe8\xff\x2a\xd1\xff\x43\xa2\xcf\x4b\xf4\x86\xc8\xe2\xfa\x52\x89\xbe\x42\xa2\xaf\x92\xe8\xeb\x24\xfa\x46\x89\xbe\x4d\xa2\xef\x93\xe8\x07\x25\xfa\x31\x89\x6e\x49\x74\x47\xa2\x1f\x97\xe8\xa7\x25\xfa\xc3\x12\xfd\x0b\x12\xfd\x49\x89\x7e\x56\xa2\x7f\x45\xa2\x9f\x97\xe8\xbf\x27\xd1\x5f\x96\xe8\xdf\x91\xe8\x7f\x29\xd1\xbf\x27\xd1\x7f\x24\xd1\xdf\x91\xe8\xc9\xe8\xe2\xba\x26\xd1\xdb\x25\xba\x2e\xd1\xaf\x92\xe8\x03\x12\x7d\x44\xa2\x6f\x97\xe8\xa3\x12\xfd\xa0\x44\x3f\x2a\xd1\xd3\x12\x3d\x2f\xd1\x3f\x25\xd1\xef\x91\xe8\x27\x24\xfa\x69\x89\x7e\x46\xa2\xff\x8a\x44\x3f\x27\xd1\xbf\x16\xd2\xff\x9e\xfd\x46\x31\x17\xb2\xfc\x6b\xae\xbf\x12\xd2\xff\x84\xeb\x03\xa1\x75\xec\x9b\x5c\x1f\x5f\x64\x7d\x8b\x62\xd1\xca\x20\x5a\xfb\x9a\x18\xd6\xeb\x25\xfa\x12\x89\xde\x72\x89\x66\xb3\xcf\x31\x89\x1a\xfb\x47\x46\xff\xce\x8e\x66\x82\xfa\xf8\xef\xcd\x9f\x60\xf6\xf1\x9a\xee\xbf\x5f\xbf\xc6\x43\x32\x2b\xf0\x23\x21\xf0\xe3\xba\x9c\xf0\x01\xac\x01\xde\x27\xaf\xcb\x04\xa6\x52\xda\x04\xce\xf3\xbf\xed\xf0\x99\xea\xb4\x42\xc8\x3f\xcb\x8f\x47\xfd\x74\xaa\xcd\x86\x50\xf9\xdb\x85\x74\x2a\x7b\xaf\xc0\x54\xb7\x43\x02\x27\xf9\x11\x98\xcf\xd4\xaa\x45\x81\x1b\xbc\xdd\x58\x8d\x53\xfc\xef\x46\x7c\xa6\xb7\xdc\x87\x04\x6e\x04\xf0\x84\x50\x1f\x6a\xe3\xdf\x14\xd2\x35\x00\xcf\x09\xdc\x04\xe0\x05\x81\x69\x9b\xf7\x2f\x02\x53\x6f\xbe\x27\x30\xb5\xdd\xbc\xc0\xd4\xab\x57\x2a\x0b\xdb\xa7\x57\x09\xd2\xa9\x8f\x46\x04\xb6\x00\x5c\x27\x70\x5b\x70\x3c\xc9\xb8\x15\xc0\xad\x02\xaf\xe5\x47\x94\xa2\xbf\x25\xf0\x51\x00\x95\x50\xf9\xf7\x86\xec\x3f\x2d\xf0\x11\x00\x0f\x87\xec\x9f\x0c\xd9\x3f\x15\xb2\x7f\x51\xe0\xc3\x34\x8f\x04\x6e\x07\xf0\x57\x02\x77\x00\xf8\x07\x81\x3b\x01\xbc\x25\x30\x8d\xad\xff\x16\x78\x39\x8d\x89\x48\xc0\x97\x53\x9b\x0a\x7c\x05\x3f\x1a\xf7\x99\xc6\x62\xaf\xc0\x57\x02\xd8\x24\x30\x6d\xcb\xf7\x08\xbc\x92\xc6\x9b\xc0\x34\x87\x4c\x81\xaf\x02\x50\x12\x78\x15\x80\x7b\x04\xbe\x1a\xc0\x9c\xc0\xab\x01\x3c\x26\xf0\x1a\x00\x4f\x0b\xdc\x05\xe0\x59\x81\xbb\xa9\xfd\x04\xa6\xbd\xd7\xb7\x05\xa6\xb9\xf4\xb7\x02\xf7\x00\x78\x5d\xe0\x5e\x00\x6f\x0b\xdc\x07\xe0\x03\x81\xfb\x29\x8c\x06\x3c\x40\x75\x12\x78\x10\xc0\x7a\x81\x47\x01\xec\x14\x78\x0c\xc0\x01\x81\x7f\x8e\xe6\x9f\xc0\xfb\x69\x3e\x09\x4c\x73\xf9\x4b\xd1\x85\xe3\xf3\xb7\x04\x5e\x4f\xf3\x49\xe0\x61\x00\xaf\x08\x4c\x6b\xc5\xdf\x08\xbc\x09\xc0\x3f\x09\xbc\x19\xc0\x8f\x05\xa6\x3d\xe9\xfb\x02\x6f\xa1\x35\x22\x16\xf0\x36\x9a\x43\x02\xd3\xda\xb3\x4d\xe0\x1d\x74\x8f\x02\x5f\x4f\x6b\x9c\xc0\x37\x00\x98\x12\x78\x17\x3f\x22\xf7\x79\x37\x80\x47\x04\xde\x03\xe0\xcb\x02\x0f\x01\xf8\xaa\xc0\xeb\x00\x7c\x4d\xe0\x8d\xd4\xff\x02\x8f\x00\xf8\x96\xc0\x5b\x69\xfe\x08\xbc\x13\xc0\xf7\x05\xbe\x11\xc0\x3f\x0b\xbc\x8f\xc6\x83\xc0\x3f\x4f\xf3\x49\xe0\x03\x34\x9f\xe2\x0b\xc7\x5f\x8b\xc0\x09\xe1\x53\x8d\x3f\xff\x7a\x05\xa6\xf9\xba\x49\x60\x9a\x5f\x7b\x04\x1e\xa7\xf9\x24\xf0\x4d\x34\x9f\x04\x3e\x48\xf3\x49\xe0\x9b\x69\x3e\x09\x4c\x6b\xff\x9c\xc0\xb7\xd0\x7c\x12\xf8\x56\x00\xe7\x04\x36\xd8\x1f\x04\x04\x7c\x1b\xb5\xa7\xc0\x9f\xa4\xf1\x25\xf0\xed\x00\x5e\x15\xf8\x0e\xea\x23\xe1\xd1\x4e\xcf\x83\x31\x81\x0b\xbc\x0f\xfd\x2b\x2b\x3c\xaf\x7c\x3e\x1c\xe2\x7c\x88\x67\x42\x3c\x17\xe2\x27\x42\x7c\x2e\xc4\x5f\x0f\xf1\x2b\x21\x7e\x2d\xc4\x6f\x86\xf8\x62\x88\x93\xca\x42\xee\x08\x71\x57\x88\x47\x42\xbc\x37\xc4\x87\x43\x9c\x0f\xf1\x4c\x88\xfd\xf7\x92\x06\xfe\x37\xa2\xfe\xa7\x5a\xff\x79\xf3\x67\x21\xbe\xb3\x60\xa3\x2f\x6b\xa5\xa7\x26\x0c\x33\x9d\xae\x5a\xd3\xe8\x73\xad\x19\x17\x7d\x55\xab\xd8\xb7\xf3\xd0\xee\x3e\x82\xe0\x8c\x98\x9d\x06\x73\x7b\xc7\xad\xfa\xd1\x49\x33\x63\x97\x72\x65\xcf\xcb\x93\x3c\x2e\x16\xa7\x27\x0d\x33\x9b\xad\x3a\xf6\x44\x70\xb6\x2c\x98\x15\xed\xd2\x02\xce\x55\xcd\x49\xcb\xcf\xb6\x58\xce\x84\x4e\x10\xfb\x1c\xb7\xea\x9a\x69\xf4\x39\xb3\x93\x2c\xe4\xd5\xc4\xd8\xce\x9d\x03\xc6\x88\x17\x6c\xf0\x82\x21\x2f\x58\xc7\x8c\xfc\x8f\x3a\xc1\x67\x9e\x9f\xce\xf5\x8c\xf0\x79\x5b\xbc\xd6\xf1\x17\xb5\xf7\x42\x7a\xf8\xf5\xb7\x89\x6b\x89\x90\xbe\x5d\x52\x5e\x2c\xc4\x6f\x7c\x84\xff\xb1\x50\x81\xe1\x37\xea\x1f\xe2\x92\x4f\xb8\xec\xaa\x7c\xc2\x0b\xf9\x9f\xf5\xb2\x77\xa5\xa8\xe0\xef\xeb\x3d\xbc\xfc\x70\x1b\x9c\xe5\xe5\x86\xcf\xa1\xc3\xf5\xbf\x53\xe2\xff\x9c\xb2\xb8\x7d\xb8\xfd\x06\xb9\x36\x10\xd2\xbf\xce\x0d\x2f\x44\x17\xf7\xf7\xc3\xcf\x2f\x92\x27\x5d\x33\x7c\x1d\xfb\xe2\x47\x94\xaf\x48\xfc\xdb\x79\x87\xe4\x95\x0f\xf7\x3f\x20\xf1\x3f\xc1\x8f\x90\x7f\x18\xff\x70\xff\x1b\x25\xfd\x77\xd2\xef\x3f\x9e\x4f\x9b\xf0\xce\x0f\xa1\xff\xae\x93\x94\x7f\xac\x71\xf1\xf2\xc2\x7c\x41\xe2\x6f\x72\x7f\x35\xf9\xe1\xfe\x2f\x4a\xea\x7f\xa6\xdb\x0b\xfd\x3f\x45\x68\xe3\xfb\x8b\x70\xfd\x3b\x25\xe5\x4f\xf2\xef\xee\xe1\xf3\xc9\xb0\x6d\xab\xa4\xfc\xf3\xbc\x7c\x7f\xbf\xda\xc6\xe7\x6a\xb8\xfc\x07\x24\xe5\x5f\x14\xfe\x1f\x81\x78\x85\xe7\xdf\xfd\x92\xf2\xfd\x8d\x9e\x78\xff\x4b\x16\x29\x7f\x5a\x52\xbe\xde\xee\x85\x3d\x1f\x71\xff\x55\x49\xf9\xfa\xb5\x0b\xcb\x69\xe3\xfb\xad\x70\xf9\xf4\x4e\x10\x1d\x9b\x2f\xf3\xbf\xa0\xa8\x5d\x03\xdc\x3f\x2a\xf8\x2f\x56\xfe\x73\x7c\x5f\x1c\xbe\xc6\xf9\x83\x4b\x6f\x08\xfc\x6c\xa1\x7c\xff\xb9\xf6\xbf\x01\x00\x00\xff\xff\x50\xab\xdf\xd7\xf0\x31\x00\x00")

func netcostBpfOBytes() ([]byte, error) {
	return bindataRead(
		_netcostBpfO,
		"netcost-bpf.o",
	)
}

func netcostBpfO() (*asset, error) {
	bytes, err := netcostBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "netcost-bpf.o", size: 12784, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"netcost-bpf.o": netcostBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"netcost-bpf.o": &bintree{netcostBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

