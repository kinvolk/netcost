// Code generated by go-bindata.
// sources:
// bpf/netcost-bpf.o
// DO NOT EDIT!

package netcostdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _netcostBpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9a\x7b\x70\x1d\xd7\x5d\xc7\xbf\x7b\xf7\xee\xd5\x95\xee\x6a\x25\x5b\x96\x2d\xf9\x51\xaf\x13\xc7\x96\x12\xfb\x4a\xb6\x64\xc5\x8e\x1f\xb1\x9d\xf8\x21\xc7\x89\x95\xc4\x4e\xe3\xd4\x61\xbb\xf7\xde\xbd\xba\x8b\xee\x8b\xbb\x7b\x15\xdb\x79\x39\xad\x93\xb8\x21\x05\x27\xa5\xc5\x4c\x0a\x09\xa5\x10\x03\x85\xa4\x13\xc0\xe5\x91\xda\x40\x3b\x09\xa4\x05\x77\x06\x68\x69\x4b\xc9\x50\x3a\x4d\xe8\x74\xc6\x61\x60\x6a\x9a\x0c\x62\x7e\x67\xcf\xde\x3d\x5a\xeb\xc4\x65\xca\x7f\xec\x8c\xee\x39\x9f\xef\x39\xbf\xf3\x7e\xec\x39\xab\x47\x77\xed\xdf\x9d\x50\x14\x84\x8f\x82\x1f\x21\xa2\xe8\x31\xaf\x8f\xfc\xdb\xf9\xef\x22\x28\x38\xbf\x30\xd0\x06\x00\xe8\x00\x0e\x61\x05\x90\x06\xce\x29\x80\x09\x20\xbf\xf8\xf2\x0c\x85\x9f\xff\x8d\x20\x5e\x9b\x0a\xbc\x37\x33\x33\x63\xdb\x49\xc6\x87\x94\x0c\xc8\x77\xde\x0e\xc2\xcf\x25\x80\x0f\x90\x9b\x04\xd3\x1f\x07\xb0\x18\x40\x5f\xac\x50\x93\x08\xd2\x7f\x8d\xbb\x64\x47\x4f\x25\x31\x8f\xb9\x1a\x3a\x98\x2b\xa6\xbb\xf8\xa7\x4a\x37\x15\xa4\xf7\x19\x5e\x8f\x04\x70\x79\x66\x66\xe6\x71\xd6\x66\x40\x2f\x82\x88\x36\xcf\xef\x5b\xdd\x3c\x5f\x9e\xee\x27\xb9\x9b\x01\x6b\x1e\xf6\x47\x86\x8a\x44\xdb\x33\xb1\x1f\xf9\xb2\x5d\x9d\x34\xa7\x9d\x86\xe7\xd6\xaa\xe6\xa6\xec\x70\x76\x9d\x39\xb0\xdb\x29\xd4\x1a\x76\x40\x6b\xd7\x67\x8b\xf9\x91\x75\x83\xc8\xd5\x8b\x43\x55\xc7\xcf\xd7\x3c\x7f\x6d\xae\x5e\xcc\xe6\x31\x54\xaa\x55\x9c\x21\xbb\x9c\xb3\xab\x43\x93\xb5\x21\xaf\x91\x1f\x9a\x74\xfd\x52\x33\x97\xcd\xd7\x2a\x43\x53\x6e\x75\xba\x56\x9e\x0a\x6d\xe0\x56\x27\x1b\x8e\xe7\x59\x6e\x1d\xfe\xb1\xba\x83\x66\xd5\x73\x27\xab\x4e\xc1\x74\xab\x3e\xa6\x9c\x63\x96\xe7\x1e\x77\x30\x6d\x97\x9b\x4e\xe0\xad\xd8\x47\x2d\xa7\xea\x37\x5c\xc7\x43\xc5\xae\x5b\xc5\xb2\x3d\xe9\x51\x31\x2c\xa2\x82\x53\x84\xd3\x4a\xd1\x2a\xbb\x79\xa7\xea\x39\xc8\x97\xec\x06\x2c\x6b\xc7\x5d\x77\xed\x38\x6c\xdd\x3d\x7e\xdf\x2e\xeb\xe0\xe1\x89\x5d\x96\xc5\xec\xbc\xa9\x9c\x55\xae\xd9\x05\x2b\x77\xcc\x77\x3c\x50\xc6\x96\xd5\x1c\x59\xdf\x4a\xb4\x5c\xab\x4d\x35\xeb\x96\x53\x76\x2a\x4c\xab\x37\x6a\x93\xeb\x50\xae\x57\xac\x29\xe7\x18\xbc\xa9\x1c\xca\x4e\x15\xf5\x29\xdf\x62\x55\xa8\xd8\x8d\x29\xfc\x5c\xd3\x69\x3a\x64\x5d\x77\xab\x93\xa8\x37\x6a\x7e\x2d\x5f\x2b\x63\xba\x6c\x57\xad\x7a\xc3\xf1\x9c\xaa\x1f\x80\x9f\x77\x43\xb5\xe6\xd7\x50\x6f\xb8\xb5\x86\xeb\x1f\x8b\x1a\xa6\xe8\x56\x0b\xce\x51\x84\xae\x9f\xb7\x02\x4f\x3e\x87\x92\xed\x95\x48\xc8\x97\x6d\xcf\x73\x0b\x28\xd8\xbe\xcd\x7e\x2c\xa7\x5a\x40\xd5\xae\xbb\x96\x5b\x40\xd1\xae\xb8\xe5\x63\x68\x38\x95\x9a\xef\x58\x6e\x7d\x14\xe5\x5a\xde\x2e\x33\x5f\x4b\x1c\x6b\x89\x63\xa1\x58\xaf\x35\x7c\xae\x32\x2f\x4b\xb8\xe2\xf8\x36\x8a\xe5\xda\x03\x54\x77\x0f\xd5\x52\xad\x58\x8c\x3a\xcd\x2b\x51\x44\xcb\x6a\xae\x1b\x83\xcf\x82\xec\x42\xa1\xc1\xab\xe6\x7a\x56\xb1\x61\x4f\x46\xb1\x79\xaf\x34\x37\xb2\x20\xb7\xe1\xf9\x41\x04\xd7\xb3\x9c\x6a\xde\xae\xc3\xad\x73\xd3\xb0\x75\x2c\x2b\xe7\xac\x1b\x83\x17\x94\x87\xfd\xba\xf5\xe9\x51\xcb\x6b\xe4\x59\xd8\xc8\xfa\x80\x0b\x1e\x0b\x18\x63\x01\xcc\x43\x4a\x30\x54\x58\xe1\xcb\x76\xce\x29\xb3\xce\x8c\xea\xe2\x7b\xbe\x5d\xa9\xa3\x5c\xab\x4e\x9a\xec\x67\xd6\x58\xb4\xac\xe6\xd8\x28\x1e\x70\x1b\x8e\x45\xbd\x3d\xe9\xd5\x2c\xcf\x99\xf4\xe0\x4d\x21\x57\x6b\x56\x0b\x56\xc1\x99\xb6\xdc\x22\xbc\x46\x9e\xb5\x6c\xe0\x8e\x31\x37\x28\xae\xe7\x47\x1e\x8a\x11\xb8\x63\xf0\x7c\xdb\x77\x82\x91\x58\xcb\x4f\xc1\xb2\xbc\x29\x2b\xd7\x2c\x16\xd1\x70\xfc\x60\xe4\xb7\xd6\x88\x74\x6b\xad\xbc\x33\xf4\x0e\x2b\xa1\x74\x4f\x7c\xe5\x2c\x71\xf7\x44\xcb\x6a\x22\x1e\xe5\x02\x77\xbf\x21\x8f\x92\xe6\x19\x98\x8a\x34\x8a\x32\x4f\xb9\xce\xe8\xd1\x54\xa3\x7b\xd1\x12\x63\x9e\x32\x3f\x05\x24\x46\xa1\x1a\xe3\x3d\x37\xf7\xdf\x94\xd9\x9c\x49\xf4\x01\x6a\x8f\xa2\x1a\x99\x0c\x21\x90\xec\x64\xa1\x04\x1b\x33\x80\xb6\x12\xaa\xb1\x2d\x93\xc9\x00\x29\x45\x19\xef\x01\xda\x56\x60\xbc\xe7\xc6\x0c\x90\xa6\xa0\x4c\x66\x5b\x06\x68\x1f\x0d\x8d\x34\xa0\xa3\x0b\x14\x2f\xd3\xab\x8c\xf7\xac\xee\x07\x74\x8d\x71\xe7\x2a\x00\xc6\x42\x8c\xf7\xa8\x46\x90\x55\x57\x17\x80\xee\x96\x69\x06\x98\x97\x55\xa8\x8c\xdb\xfb\x82\x28\xab\xfb\xa9\x98\xc0\x7c\x0d\x89\x45\x81\x44\x29\xf5\x8c\x22\xd1\x17\xe1\x82\x51\x2c\xed\x8a\xb0\x77\x74\x56\xe4\x85\x19\x25\xa8\xf6\xa2\x56\x2d\x35\xa0\xaf\x55\x4b\x8d\x6a\xd9\xdf\x89\x00\x4e\x29\x5d\xc4\x8b\x17\x29\x41\xcc\x53\x4a\x17\xb0\x24\x0c\xa5\xa0\xa5\x61\x10\xb0\xac\xa7\xe5\xc5\x1f\x6b\xc1\x16\x12\x76\x8a\x1e\xef\x88\xd6\x88\x60\x5b\xc2\xcd\x00\x12\xbd\xed\x6a\x18\xc0\x3c\x0b\x94\x95\x2c\x89\x93\xd4\x6f\xd7\x21\xf2\xaf\x4a\x46\xfe\xd5\xe9\xc8\x3f\xa0\x47\xfe\xc1\x6e\x50\x39\xd0\x96\x8c\x32\x58\x16\x65\xc0\xc4\x3f\x24\xcf\xee\x48\x4c\xfd\x39\x19\xbc\x0e\x2a\x3a\x33\x4e\x29\x6c\xec\xa6\xdb\xda\xc9\xf9\x16\x05\xbc\x94\xe8\x78\x93\xb6\xa3\x1f\x53\xa5\xe8\x9d\x40\x6f\xa3\x9f\xf9\xa1\x2f\x30\xd4\x92\x1d\x29\x05\xe8\x34\x4e\x86\x15\x5a\xd2\xc5\x36\xbb\x0f\x28\x40\x72\x45\xc7\xb5\x0a\x90\x99\xdf\x32\x64\xef\x16\xf3\xc4\x56\x51\xee\x63\xa5\x5c\x45\xd9\xcc\x6f\x15\x7a\xd5\x1b\x0a\xd0\x93\x78\x26\xa0\xb5\xe7\x15\x60\x81\xc1\xfc\x03\x3f\x4c\x02\xbd\x0f\x85\x11\xb3\xe7\x34\x60\xe1\x5e\x8e\xf7\xd2\xde\x3b\x16\x86\x8d\x50\x9a\x58\xf8\x02\x67\x9a\x22\xbd\x87\xc3\xc0\x4d\x3f\x0e\x5a\x82\xaa\xc2\x5a\x22\x81\x8e\x8b\x0a\xb0\x88\xd4\x97\xb5\x61\xbd\x8f\x35\xaa\x02\x68\xeb\x74\x44\xb0\x5e\x4f\x46\x30\xa2\xa7\x23\x18\xd5\x05\x9b\x0d\x7a\x77\x04\x63\xfa\x82\x08\x6e\xd4\xfb\x22\xd8\xa8\x2f\x8d\x60\x93\x6e\x46\x70\x93\xbe\x32\x82\xcd\xfa\x40\x04\x5b\xf4\x35\x0c\x7e\x51\x05\xb4\xad\xfa\x70\x14\xb2\x4d\xbf\x35\x82\x9b\xf5\xbd\x11\x6c\xd7\xf7\x47\xb0\x43\x9f\x88\x60\xa7\x7e\x30\x82\x5d\xfa\xbd\x11\xec\xd6\x8f\x44\xb0\x47\xff\x30\x83\xe7\x28\xd3\xbd\x7a\x21\x82\x71\xdd\x8f\xa2\xed\xd3\x4f\x46\x70\x9b\x7e\x2a\x82\x3b\xf4\xa7\xfb\x37\x50\xfc\x03\x7a\xfa\xf4\xe2\x34\x39\x2c\xf0\xc5\x40\x43\xd0\xc4\xd4\xb9\xda\x84\x7e\x26\xb2\xbb\x53\x7f\x21\x82\xbb\xf4\xcf\xf6\x1f\x27\x83\xbb\xf5\xf4\xd9\xc5\x69\x72\x58\xe0\x4c\x92\x69\xb3\xfa\x53\x13\xfc\x49\x74\x7c\x4e\xe5\x7d\xbb\x51\xf3\x0d\x66\xf4\x0a\x19\x35\x0d\x44\x30\x6d\x24\x22\x78\xc0\x08\x3a\xfa\xcb\x04\x47\x8d\x54\x04\xc7\x8c\xb6\x08\x8e\x1b\xe9\x08\x1e\x34\xda\x19\x7c\x9d\xe0\x21\xa3\x23\x82\x87\x0d\x3d\x82\x47\x0c\x63\xc9\x76\xf2\x3c\x6a\x74\x2f\x35\xb5\x47\x8d\x25\x77\x10\x9d\x30\xb0\x2c\xad\x9d\x08\x4a\xf7\x2f\xa4\x3c\xc6\x4b\xc7\xe0\x23\x46\x12\x4b\x1e\x20\xdf\x49\x03\xcb\x4c\xed\xa4\x11\x75\xc2\xe3\x3c\x22\x83\x27\x8c\x6e\x08\x23\xf6\x63\xc6\x70\x94\xc8\x53\xc6\x28\x8c\x2f\x26\xf9\x5c\xed\x0b\x56\x8e\x84\x71\x31\x54\x7a\x99\x92\x56\x8c\x57\xb8\x92\xea\x37\xda\xf8\x2e\x93\x5a\x62\x5c\x0e\xe3\x2d\x0f\x2c\xd3\x1d\x49\x8d\xb7\xeb\x7e\xed\x94\x30\xfe\x3f\x26\xce\x99\xa7\xc4\x39\xf3\xf3\xe2\x9c\x79\x5a\x9c\x33\x1f\x17\xe7\xcc\x2f\x88\x73\xe6\x34\x9f\x33\xac\x7a\xcf\x88\x73\xe6\x59\x3e\x19\x18\x7c\x42\x9c\x0c\xbf\xa4\x8f\x46\x36\x9f\xd4\x37\x46\x21\x9f\xd2\xf7\xa2\xe3\x87\xac\x26\xcf\xff\x40\x09\xca\x09\xa0\xae\x06\x7f\xdf\x6d\x2d\x93\x48\x24\xf8\x0b\xfd\x72\x20\xf9\x32\x7f\x39\x0f\x83\xbb\xb8\x9f\x0e\x06\x7d\xdc\x4f\x87\xa1\x65\xdc\xff\x61\x00\x37\x70\x3f\x6d\xf7\xa3\xdc\x4f\xeb\xd1\x0e\xee\xa7\xbd\x7e\x1f\xf7\xbf\xc9\x0e\x4c\x3c\x7d\x05\xf8\x99\x30\x7d\x05\xa8\x86\xe9\x2b\xc0\x74\x98\xbe\x02\x3c\xca\xd7\xe1\x13\x0a\xf0\x91\x30\x7e\x02\x78\x32\x8c\x9f\x00\x9e\x0d\xe3\x27\x80\x5f\x0e\xcb\x93\x08\xca\xc1\xca\x93\x00\xce\x86\xe5\x49\x00\x2f\x85\xe5\x49\x00\x7f\x12\x96\x47\x05\xbe\x44\xed\x47\xe9\xab\xc0\xdf\x72\xff\x0b\x2a\xf0\x8f\x61\xbe\x49\xe0\x7b\x61\xbe\x49\xe0\x52\x98\x2f\x1f\x33\xb4\xc3\x9c\x48\x02\xb4\xf0\xd2\x71\xec\x42\x12\xa0\xfd\x80\xa5\x4f\xaf\x0f\xdc\x6f\x6a\x41\x7c\x9a\xce\xdb\x35\xa0\x27\x18\x7e\x6c\xfb\xeb\x0f\xfc\x4a\x92\xb7\x3b\x7f\xc2\x22\x22\xc5\xdb\x63\xd5\x4f\x10\x8f\x17\x8b\x9a\x5a\xa3\xb2\xdd\xa4\x00\xed\x98\xf5\x24\xfa\x01\xdc\xca\xf3\xa7\xbe\xdf\xc7\xd3\x4d\xb7\x0e\xbe\x91\xbd\x4d\xfb\x60\xcc\x7e\x71\x14\xa7\x93\xc6\x4b\x81\x1f\xe8\x4a\xb3\xcb\xa7\x94\x03\xd6\x69\x8f\xb3\x55\x56\x87\xe4\x02\x3a\x68\xaa\x51\x39\x1b\xdc\x4f\xf5\x79\x90\xfb\xa9\x0c\x4f\x70\x3f\x8d\xb7\x67\xb9\x9f\xc6\xdb\xa7\x83\x81\x6a\xcc\xe3\x63\xf8\xc5\x18\x7f\x3e\x60\xb6\x25\xa7\xd1\x3a\xe7\x07\x6f\x24\x42\x1b\xfd\x11\xb7\xeb\xe5\x76\xe7\x55\xe6\x52\x75\xc0\xcf\xfb\x2c\xde\x6b\x2a\x7b\xdb\x60\x7a\xb8\x93\x53\x3a\x3d\x82\xff\x2b\x41\x5a\x34\x74\xf0\x4d\xc1\x2f\xbc\x61\xff\x3f\x3b\xb7\xf1\x13\xce\x95\x87\x98\xe0\xbc\x1b\x3b\xef\x5c\x79\x5a\x8e\xce\x4a\xc1\x69\x48\x72\x54\xf2\xa6\xd8\xa1\x98\xbc\xd1\x71\x99\xce\x36\x8e\xbf\xee\x7f\x77\x3d\x30\x74\xe5\xf5\x82\x5b\xf5\xcd\x56\xaa\x03\x9e\xdf\x68\xe6\x7d\xb3\xd5\xa3\xe6\xf5\xde\x54\x6e\x10\xed\x6e\xd1\x1c\x60\x67\xfa\x92\x5d\x2e\x0e\x78\x53\xb9\x35\x66\xad\x58\xf4\x1c\xbf\x56\x0c\x6d\x1c\xbf\x54\x2a\x34\xd6\x98\xa5\xa0\x07\x07\x07\xcd\x15\x5b\xcd\x5d\x07\xf7\x5a\x13\xd6\xf8\xc4\x20\xda\xf9\xf9\xfe\x43\xc3\xf7\x9b\x5b\xcd\x91\xf5\x9b\x83\x44\xbd\xa9\xdc\xda\x6d\xe1\x90\x31\xb7\x6e\x35\x27\x76\xdc\x72\xdb\xae\x83\xd6\x81\x43\x07\xf7\x1c\x18\xbf\x63\xcf\xa0\xf9\x20\xda\xdb\xa9\x90\x0d\xc7\x37\xb7\x9a\x57\x5e\x30\x04\xa5\x61\x07\x67\xf3\x86\x2b\x4a\xe5\xd6\x59\xa1\x0a\x74\x6e\x1e\x5c\x63\xae\x0a\x4b\xb1\xee\xfe\x35\xe6\xe8\xe0\x66\x4a\xbb\x68\x0e\x50\xda\x5b\xcc\xe1\xff\xa3\xcc\x3c\x69\x66\x94\x17\x3b\x81\x0e\xa2\xbd\xdd\xb2\xbc\x63\xd5\xbc\x55\x74\xfc\x7c\xc9\xb2\xab\x05\xcb\x2e\x14\x82\xd0\x35\x26\x6b\x96\xb2\x53\x1d\xdc\x8c\x87\x67\x5d\xc6\xb0\x99\xf5\x93\xdf\xe3\x08\xd7\x41\xd1\x35\x4e\x70\x4f\x10\xde\xe5\x84\x6e\xc5\xae\x7b\xb1\x13\x7c\xeb\x0c\x4d\x5b\xed\x80\xb0\x14\x2c\x60\xe7\x8a\xe8\x0c\x1b\xba\xb4\x94\x4e\x2b\xd1\x7a\xd4\xcd\xff\x48\xe3\xd7\x68\x78\x44\x01\xbe\x48\x11\xce\x04\xf1\x89\xbf\xab\x00\xa9\xb3\x41\x1c\x91\x4d\xce\xab\x12\x40\xe7\x85\xe0\x6e\xf2\x11\xe1\x9e\x6f\x23\xe7\x8d\x09\x20\xf3\x7a\xb0\xa4\x86\x9c\x7a\x1d\xd8\xcb\xd9\x26\xfb\xaf\x00\xa7\x39\xbf\x9a\x00\xda\x2e\x06\xdb\x28\xf1\xdf\x50\xf8\xbf\x02\x6f\x89\xe1\x6f\x01\x97\x63\xf9\xd1\x31\x91\xf8\x7a\x95\x96\x58\x05\xdd\x9c\xc7\x54\x60\x65\x52\x61\x77\x90\x21\xab\x49\x85\xb5\x0b\xb1\x45\xcb\x6e\x37\xdf\x27\xe8\x9d\x77\x66\x66\x26\x89\x34\xd2\x0f\x65\x58\x5b\x8a\x4f\x78\x01\xb1\x84\x0e\x61\xf8\x7d\x96\xab\xf2\xae\xd1\x09\x45\x61\xcb\x3d\x35\xef\x50\xd3\x6b\x0c\xb9\xd5\x7c\xb9\x59\x70\x68\x4e\x53\x4f\x61\x96\x68\x7b\x95\xb5\x93\x4e\xd5\x69\xb8\xf9\xd9\x01\x65\xb7\xda\x3c\x0a\xd6\xb5\x25\xa7\x5c\x77\x1a\x5e\xb6\x44\x69\xce\x5e\x15\x12\xa0\x85\x61\x6d\xb9\x3c\x36\x9a\x2d\xd1\xb6\x12\xc5\xa7\x61\xc8\x6d\x28\x6e\x89\xf6\x0f\x1a\x95\x5e\xe0\x45\x32\x81\xf6\x44\x58\x19\x75\x95\xa2\xa5\x3a\xae\x4d\x99\xea\x3d\xa6\xd6\x99\x52\x87\x4d\x0d\x29\x75\xc2\xd4\x32\x29\x75\x7d\x56\x4b\xa5\x48\x5d\x91\x52\x6f\xdf\xa7\x8e\x64\xb5\xb6\xd4\x56\xad\x73\x24\xa5\xee\xd9\xa7\x6e\x62\x94\x52\x77\x9b\x5a\x2a\xa5\x5e\xc0\x16\x6d\xe5\x0a\x4d\x4d\x99\x9a\x92\xba\x36\x91\x80\x32\xd7\xcd\x76\xf0\xfc\x36\xdb\xd2\xde\x99\x99\x3b\xb4\x4d\x62\xd5\x86\xeb\x25\xfa\x16\x89\xfe\xb3\x12\xbd\x29\xd1\x8f\x4b\xf4\x27\x25\xfa\x69\x89\xfe\x9c\x44\x7f\x51\xa2\x7f\x5e\xa2\xbf\x2a\xd1\x5f\x93\xe8\x17\x25\xfa\xdf\x4b\xf4\xb7\x25\xfa\x7b\x12\x7d\xce\x8f\x15\x68\x43\x4a\xa2\x2f\x96\xe8\x2b\x25\xfa\x1a\x89\x3e\x2c\xd1\x47\x25\xfa\x56\x89\xbe\x53\xa2\x4f\x48\xf4\xc3\x12\xbd\x28\xd1\x6b\x12\xfd\xb8\x44\xff\xa8\x44\xff\x84\x44\x7f\x4e\xa2\x7f\x56\xa2\xbf\x28\xd1\x3f\x27\xd1\xcf\x49\xf4\x3f\x93\xe8\x5f\x96\xe8\x5f\x95\xe8\x7f\x27\xd1\xff\x59\xa2\xbf\x2d\xd1\xff\x43\xa2\xff\xb7\x44\xef\x48\xcc\xad\xf7\x4a\xf4\xe5\x12\x7d\x50\xa2\x0f\x49\xf4\x6d\x12\xfd\x56\x89\xbe\x4f\xa2\x1f\x92\xe8\xf7\x4b\xf4\x29\x89\x5e\x97\xe8\x8f\x48\xf4\x27\x25\xfa\x69\x89\x7e\x46\xa2\x3f\x2f\xd1\x7f\x53\xa2\xff\xae\x44\xff\x03\x89\xfe\xa7\x12\xfd\x4b\x12\xfd\xab\x12\xfd\x1f\x24\xfa\xb7\x25\xfa\xf7\x25\xfa\x7f\x4a\xf4\xf7\x24\x7a\x8f\x3a\xb7\xde\x2f\xd1\xaf\x91\xe8\x37\x48\xf4\xac\x44\xdf\x2c\xd1\x6f\x91\xe8\xb7\x49\xf4\x83\x12\xfd\x7e\x89\xee\x48\xf4\x8a\x44\xf7\x24\xfa\x43\x12\xfd\x09\x89\xfe\x54\x4c\xff\x0e\xfb\x55\xf1\x42\x2c\xe6\xd7\xb9\x7e\x29\xa6\x5f\xe4\xba\x39\xc7\x3a\xa3\x62\xce\x4c\xa1\xb6\xbe\x60\xc5\xf5\x76\x89\x3e\x4f\xa2\xf7\x5c\xa1\xf9\xec\xb6\x3f\xd5\xe2\xf0\x2a\xe3\x1d\x76\x45\x10\x95\x27\xdc\x3f\xb7\xb2\xf8\x5a\xeb\x7d\x36\x74\xd7\x73\x1d\x31\x3d\xfc\x9a\x46\xe6\x45\xe1\xd3\x99\xc2\xbf\xdd\x87\x39\x77\x00\xb0\x85\x8f\x33\x1d\xfc\xc3\xc8\x7c\x81\x55\xe1\x3a\x83\x38\xcf\xff\x27\x20\x64\x2a\xfb\x07\x84\xf4\x2d\x7e\xbd\x17\x86\x53\xe9\x6e\x8c\xe5\xbf\x5d\x08\xa7\xbc\xf7\x0a\x4c\x65\x3b\x28\x70\x9a\x5f\xe1\x84\x4c\xad\x5f\x16\x98\xfe\x8e\x0a\x9c\xe1\xff\xb7\x10\x32\xbd\x95\x3e\x2d\x70\x67\x70\x3c\x9a\xd5\x3e\xbf\x2e\x84\x1b\x00\x7e\x4f\x08\x2f\x00\xf8\x0b\x21\xbc\x0b\xc0\x5f\x09\xdc\xdd\x1a\x5f\x01\xd3\x28\x78\x57\xe0\xf9\xfc\x3c\x17\x72\x0f\xfb\xb0\x15\x31\xf5\xd9\xa8\x32\xbb\xfd\x76\x0a\xe1\xbd\x00\x6e\x17\x98\xda\xe2\x4e\x81\x17\x91\x8d\xc0\xd4\x57\x53\x02\x8f\xf0\x33\xa2\x68\x7f\x5c\xe0\x0f\x51\x7b\xc5\xf2\x7f\x36\x16\xff\x53\x02\xdf\x07\xe0\x33\xb1\xf8\x2f\xc5\xe2\xbf\x12\x8b\xff\x35\x81\x0f\x03\xf8\xa6\xc0\x7d\x00\xbe\x2f\x70\x3f\xd0\x7a\x4f\xe8\xe0\x63\x4d\x49\x44\xbc\x84\xfa\x48\xe0\xa5\xa4\x09\xbc\x0c\xc0\x80\xc0\x34\x36\x37\x08\xbc\x9c\xda\x57\x60\x3a\x07\x1f\x10\x78\x05\x80\x23\x02\x5f\x03\xc0\x15\xf8\x5a\x6a\x4f\x81\x57\x02\xf8\xa8\xc0\xd7\x01\xad\x7d\x96\x78\x15\x80\x5f\x15\x78\x35\x80\xdf\x11\x78\x40\xf8\xff\x19\xe2\x41\xa0\xb5\xff\x11\xd3\xd9\xe9\x6b\x02\xd3\xdc\xfa\x8e\xc0\x6b\x00\xfc\x40\xe0\xb5\x00\x2e\x0b\x9c\xa5\x39\xa8\x46\x3c\x44\x63\x52\xe0\x61\x6a\x13\x81\xd7\x01\xd8\x22\x30\xad\x31\xfb\x04\xde\x07\xe0\x83\x02\xdf\x4e\x73\x44\xe0\x3b\x00\x3c\x26\xf0\x01\x9a\x4f\x02\x8f\x47\x57\xa7\xad\xf1\xf9\x97\x02\x8f\xd1\x7c\x12\x98\xd6\x8e\x7f\x12\x78\x23\x80\x7f\x13\x78\x33\x80\x1f\x09\x4c\x67\xca\x64\x32\x62\xb6\x76\x0a\xbc\x8d\xc6\x84\xc0\xb4\x16\xdd\x20\xf0\x0e\x5a\x7f\x04\xde\x49\x6b\xa4\xc0\xb7\x02\x78\x58\xe0\x5d\x00\x9e\x12\x78\x37\x80\x5f\x11\x78\x0f\x80\xdf\x12\x98\xd6\xba\x2f\x08\xbc\x01\xc0\x79\x81\x47\x01\xfc\xb5\xc0\x37\x51\xff\x0b\xbc\x09\xc0\xb7\x05\xbe\x99\xe6\x8f\xc0\xb7\x00\xf8\x77\x81\xf7\x03\xf8\x2f\x81\x6f\xa3\xf1\xa0\x45\x7c\x2f\xcd\x27\x81\x27\x68\x3e\x69\xb3\xc7\xdf\x80\xc0\xb4\x3e\x6f\x10\x98\xe6\xdf\x4e\x81\x69\xbe\x1e\x10\x98\xe6\xd7\x11\x81\xef\xa4\xf9\x24\xf0\x5d\x34\x9f\x04\xbe\x9b\xe6\x93\xc0\xb4\x17\x9c\x16\xf8\x10\xcd\x27\x81\xef\xa1\xf9\x24\xf0\x07\xa9\x8f\x84\x2d\x9d\xd6\xef\x23\x02\xd3\xfe\x53\x12\xb8\xc8\xdb\x3c\x7c\x2c\x61\x3f\x0a\xf9\xde\x18\x97\x62\x7c\x34\xc6\xa7\x62\x7c\x26\xc6\x67\x63\xfc\x85\x18\xbf\x1e\xe3\x6f\xc4\xf8\xad\x18\x5f\x8e\x71\x5a\x99\xcd\x7d\x31\x1e\x88\xf1\xc6\x18\x87\xef\x11\xd4\x9e\x39\xbe\x46\x43\x58\xef\x5f\x8d\xb1\x33\x59\x2c\x20\x5b\x70\x72\xcd\x49\xcb\xce\xe5\x1a\xce\x34\xb2\xbe\x73\xd4\x47\xb6\xe1\x94\xb3\x3b\x0f\xee\xce\x12\xb0\x5b\x50\x1e\xcb\xf3\x1b\x73\x5f\xa0\xf2\xf0\x8a\x9d\x77\xab\xc5\x5a\x90\x40\x20\x05\x5c\x2e\x4f\x57\x2c\xbb\x50\x68\x78\xee\x64\x74\xd1\x2a\x44\x2b\xbb\xd5\x59\x5c\x6c\xd8\x15\x27\x4c\xb6\x5c\xcb\xc7\x6e\xe3\xb2\x9e\xdf\xf0\xed\x1c\xb2\xde\xb1\x0a\x73\x79\x89\xb1\x7f\xe7\xce\x61\x6b\x2c\x70\x46\x03\x67\x84\x85\x86\x5f\x07\xa2\xef\x05\x3f\xf5\x73\x4e\xf8\x7c\x2a\x3e\x2b\x07\x03\xf7\xdd\x98\x1e\x7f\x8d\xed\xe2\x5a\x2a\xa6\x6f\x97\xe4\x97\x8c\xf1\xdb\x57\xb1\x8f\xdf\xe3\xc4\xdf\x8c\xbf\x87\x2b\x3e\x11\xb2\xe7\x65\xfe\x8d\x31\xfc\xd4\xb8\x90\xd7\x33\xb4\x0f\xef\xad\xaf\xe1\xf9\xc7\xdb\xa0\xce\xf3\x1d\xb8\x4a\xf9\x9b\x12\xfb\x33\xca\xdc\xf1\xe3\xed\xb7\x9a\x6b\xc3\x31\xfd\xd3\x3c\xe2\x69\x75\x6e\xfb\xd0\xfd\xb5\x39\xd2\xa4\x67\x0d\x5f\x97\x9e\xbf\x4a\xfe\x8a\xc4\xfe\x0d\x6e\x5f\x52\xde\xdf\xfe\x3e\x89\xfd\x08\xbf\x92\x7d\x55\x7b\x7f\xfb\x7b\x24\xfd\x77\x91\x77\xdc\x9b\x7c\x60\x2c\x14\xde\xc9\x21\xf4\xdf\x1e\x49\xfe\x97\xf4\xb9\xf3\x8b\xf3\x1b\x12\xfb\x77\xb8\xfd\x54\xdb\xfb\xdb\xbf\x26\x1b\x7f\xab\x03\x37\xec\xd7\x85\xfc\xfd\x3f\x5e\xfe\x7e\x49\xfe\x47\xf8\x42\xb8\xf7\x2a\xed\xdf\x2b\xc9\xff\x4d\x9e\x3f\xff\x3c\xc1\xf2\xef\x9a\x23\xff\x67\x24\xf9\x9f\xed\x0d\xdc\xf8\xf8\x8f\xcf\xbf\x8f\x4b\xf2\xbf\xc4\x0d\xc5\xf9\x37\x6f\x8e\xfc\x1f\x93\xe4\x7f\x91\xe7\xbf\xfc\x2a\xf5\x7f\x58\x92\x7f\xf7\xe0\xec\x7c\x16\xf2\xf3\x4f\x3c\x7f\xda\x83\xd5\xfd\x33\x35\xe1\x1f\x40\x83\x72\x73\xfb\xa4\x60\x3f\x57\xfe\xe7\xc3\x7f\xe8\x8b\x3d\x97\xb8\xc1\x85\xf6\xc8\xae\x20\xe4\x1f\xee\x6b\xff\x13\x00\x00\xff\xff\xe0\x27\xe9\xe8\xe0\x2f\x00\x00")

func netcostBpfOBytes() ([]byte, error) {
	return bindataRead(
		_netcostBpfO,
		"netcost-bpf.o",
	)
}

func netcostBpfO() (*asset, error) {
	bytes, err := netcostBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "netcost-bpf.o", size: 12256, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"netcost-bpf.o": netcostBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"netcost-bpf.o": &bintree{netcostBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

