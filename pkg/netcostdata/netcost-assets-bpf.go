// Code generated by go-bindata.
// sources:
// bpf/netcost-bpf.o
// DO NOT EDIT!

package netcostdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _netcostBpfO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9b\x7b\x90\x1c\xc5\x7d\xc7\xbf\xb3\xaf\xdb\xbb\x9d\x9b\x3b\x71\xba\x97\x04\x62\x64\x84\x74\x07\xf7\x94\x4e\xa7\x93\x84\x9e\xa0\xc7\x89\x8b\x74\x08\x41\x24\x61\x18\xcd\xee\xce\xde\x0e\xbb\xb7\xbb\xde\x99\x3b\xee\x40\x20\x99\x92\xf0\xe1\x40\x2c\xb0\x09\x84\xa4\xb0\x8c\x53\x89\xec\x22\x41\xa9\xe0\xe0\x18\x12\x54\x54\x1c\xe3\x38\xef\x90\x14\x89\x1f\x89\x43\x48\x11\x87\x94\x81\x54\x82\x12\x43\x5d\xea\xd7\xd3\xb3\xd3\x37\xba\x06\x92\xf2\x7f\x9e\x2a\x6d\xf7\xe7\xdb\xbf\x5f\x77\x4f\xbf\x66\xba\xe7\x74\x62\xd7\xd8\xee\x88\xa2\xc0\xbf\x14\xbc\x87\x80\x82\x6b\xa0\x27\x88\x6f\xe7\xbf\xed\x50\xf0\x52\x9b\xa7\x75\x01\x50\x01\xdc\x82\x35\x40\x12\x78\x5e\x01\x74\x00\x99\x65\x17\xe7\x29\xfd\xa5\x2f\x7b\x76\x75\x51\xe0\xfd\xf9\xf9\x79\xd3\x8c\x31\xbe\x45\x49\x82\x62\x2f\x99\x5e\xfa\xf3\x11\x60\x05\x85\x31\x30\xfd\x34\x80\x65\x00\x26\xe0\xe5\xf7\x2d\x1e\x5a\xa8\xc7\xfc\xfc\xfc\x7c\x1c\x9d\xcc\x4f\xf4\x5f\xf6\x31\xfc\x9f\xe7\x37\x39\xa9\x2c\xf1\xfc\x9f\xe6\xf5\x8b\x00\x17\xe7\xe7\xe7\x3b\x42\x8d\x70\x9a\xb5\x0d\xd0\x8a\x14\xe3\xa0\xfe\x71\x56\x8e\xc9\xcb\xff\x6e\x73\xd2\xab\x87\xe2\xd9\x7f\xb7\xb9\x99\xb1\x67\x25\xda\x21\x64\xd7\xe1\x31\x2f\xef\x31\x1e\x52\x69\x49\x5e\x67\x70\xdb\x3d\xe3\x63\xc8\x14\xcd\xd2\x84\x3e\x6d\x55\x1d\xbb\x5c\xd2\x37\xf6\x0d\xf4\x0d\xea\x5d\xbb\xad\x6c\xb9\x6a\x7a\xd4\xbb\xb6\x2f\x97\x59\x37\xd8\x8d\x74\x25\xd7\x5f\xb2\xdc\x4c\xd9\x71\x7b\xd3\x95\x5c\x5f\x06\xfd\xf9\xf2\xa4\xd5\x6f\x16\xd3\x66\xa9\x7f\xa2\xdc\xef\x54\x33\xfd\x13\xb6\x9b\x9f\x4a\xf7\x65\xca\x93\xfd\x05\xbb\x34\x5d\x2e\x16\x7c\x1f\x14\x2b\x93\x86\xe3\x9a\xae\x03\x77\xb6\x62\x61\xaa\xe4\xd8\x13\x25\x2b\xab\xdb\x25\x17\x05\x6b\xd6\x70\xec\xbb\x2d\x4c\x9b\xc5\x29\xcb\x8b\x4e\x9a\x33\x86\x55\x72\xab\xb6\xe5\x60\xd2\xac\x18\xb9\xa2\x39\xe1\x50\x2d\x0c\xa2\xac\x95\x83\x51\xb4\x33\x56\xc9\xb1\x90\xc9\x9b\x55\x18\xc6\x8e\x83\x07\x77\x1c\x31\x6e\x1e\x3d\xba\xcb\x38\x74\x64\x7c\x97\x61\x30\x6b\xa7\x90\x36\x8a\x65\x33\x6b\xa4\x67\x5d\xcb\x01\x15\x67\x18\x53\xeb\xd6\xd6\xb2\x2a\x96\xcb\x85\xa9\x8a\x61\x15\xad\x49\xa6\x55\xaa\xe5\x89\x41\x56\xdd\x82\x35\x0b\xa7\x90\x46\xd1\x2a\xa1\x52\x70\x0d\x56\xf1\x49\xb3\x5a\xc0\xa7\xa6\xac\x29\x8b\xbc\x2b\x76\x69\x02\x95\x6a\xd9\x2d\x67\xca\x45\x4c\x17\xcd\x92\x51\xa9\x5a\x8e\x55\x72\x3d\x70\x33\xb6\xaf\x96\xdd\x32\x2a\x55\xbb\x5c\xb5\xdd\x59\xd8\xa5\x89\xaa\xe5\x38\x86\x9d\xb3\x4b\x59\x6b\x06\x7e\xe8\x66\x0c\x2f\x92\x49\x23\x6f\x3a\x79\x12\x32\x45\xd3\x71\xec\x2c\xb2\xa6\x6b\xb2\x1f\xc3\x2a\x65\x51\x32\x2b\xb6\x61\x67\x91\x33\x27\xed\xe2\x2c\xaa\xd6\x64\xd9\xb5\x0c\xbb\x32\x84\x62\x39\x63\x16\x59\xac\x26\x0e\xd7\xc4\x61\x5f\xac\x94\xab\x2e\x57\x59\x94\x65\x3c\x69\xb9\x26\x72\xc5\xf2\x5d\x74\xef\x0e\x4a\xf9\x72\x2e\x17\x74\x95\x93\x27\x43\xc3\x98\x1a\x1c\x86\xcb\x92\xcc\x6c\xb6\xca\x6f\xcd\x76\x8c\x5c\xd5\x9c\x08\xac\x79\xaf\x4c\x8d\xb0\x24\xbb\xea\xb8\x9e\x81\xed\x18\x56\x29\x63\x56\x60\x57\xb8\xab\xdf\x3a\x86\x91\xb6\x06\x87\xe1\x78\xf5\x61\xbf\x76\x65\x7a\xc8\x70\xaa\x19\x96\xb6\x6e\xad\xc7\x59\x87\x25\x0c\xb3\x04\x16\x21\xc5\x1b\x20\xac\xf2\x45\x33\x6d\x15\x59\x67\x06\xf7\xe2\x3a\xae\x39\x59\x41\xb1\x5c\x9a\xd0\xd9\xcf\x82\x11\x68\x18\x53\xc3\x43\xb8\xcb\xae\x5a\x06\xf5\xf6\x84\x53\x36\x1c\x6b\xc2\x81\x53\x40\xba\x3c\x55\xca\x1a\x59\x6b\xda\xb0\x73\x70\xaa\x19\xd6\xb2\x5e\x38\xcc\x42\xaf\xba\x8e\x1b\x44\xc8\xc2\x0b\x87\x41\x63\xde\xf2\x46\x62\x39\x53\x80\x61\x38\x05\x23\x3d\x95\xcb\xa1\x6a\xb9\xde\x78\x07\x1b\x99\x46\xd5\xca\x4c\xf3\x28\x1b\x3f\x15\x33\x53\xb0\xdc\x10\x30\xa3\x8c\x9d\xad\xf2\xb9\xe4\x5f\xc9\xda\xba\x7b\x93\x1f\x3d\xa6\xf8\xd2\xad\xe1\x55\x38\xcf\xc3\x4a\xcd\x6b\x3c\x6c\x72\x8e\x87\xe7\xe5\x26\x6f\xf3\x70\x5c\x91\x9a\x28\x4b\x94\xab\xb5\x96\x78\x54\x6b\x6e\x5f\xae\x2d\x51\x2e\x4b\x00\x91\x21\x44\xb5\xd1\x96\x6d\x9d\x9b\x52\x9b\x53\x91\x0e\x20\xda\xa2\x44\xb5\x54\x8a\x10\x88\x35\xb2\x54\x82\x91\x14\x10\x5f\x85\xa8\xb6\x35\x95\x4a\x01\x09\x45\x19\x6d\x01\xea\x56\x62\xb4\x65\x43\x0a\x48\x52\x52\x2a\xb5\x35\x05\xd4\x0f\xf9\x4e\x71\xa0\xa1\x09\x64\x97\x6a\x55\x46\x5b\xd6\x74\x02\x6a\x9c\x71\xe3\x6a\x00\x5a\x1b\x46\x5b\xa2\x9a\x57\x54\x53\x13\x80\xe6\x9a\x6b\x0a\x58\xd2\xa7\x50\x1d\xb7\x77\x78\x26\x6b\x3a\xa9\x9a\xc0\x65\x71\x44\xda\x3d\x89\x72\x6a\x19\x42\xa4\x23\xc0\xa5\x43\xb8\xbc\x29\xc0\xd6\xa1\x05\xc6\x6d\x29\xc5\xbb\xed\xf6\xda\x5d\xc6\x81\x8e\xda\x5d\xc6\xe9\x2e\x3b\x1b\xe1\xc1\x9c\xd2\x44\xbc\xac\x5d\xf1\x2c\xe7\x94\x26\x60\xb9\x9f\x4a\x49\x97\xfb\x49\xc0\x15\x2d\xb5\x28\xbe\x1f\x07\x7f\x30\x24\x59\x67\xa8\xe1\x8e\xa8\x8d\x88\x08\x45\xb6\x01\x88\xb4\xd6\x47\xfd\x04\x16\x59\xaa\xac\x62\x59\x9c\xa2\x7e\xbb\x1a\x41\x7c\x75\x2c\x88\xaf\x49\x06\xf1\x2e\x35\x88\x77\x37\x83\xea\x81\xba\x18\x2b\xe0\x2c\x15\xb0\x2b\x28\x20\xf1\x0c\xa5\xfd\x0e\xa8\x96\xcc\x2e\xa1\xb0\x61\x9a\xac\xab\xa7\xe0\x8f\x28\xe1\xd9\x48\xc3\x77\xe8\x49\xf5\x06\xd5\xff\x2d\xfa\x79\x97\x7e\x3e\xf0\x63\x9e\x63\x3c\xd6\xf0\x0e\x80\x46\xed\x94\x5f\xf7\xe5\x4d\xec\x19\x58\xaf\x00\xb1\x95\x0d\x9a\x02\xa4\x3e\xa8\x39\x52\x3e\x58\x22\x36\x80\x72\x94\x62\x91\x15\x54\xcc\x65\x7e\x42\x64\xc5\xef\x2a\x40\x4b\xe4\x11\x8f\xae\xfe\xaa\x02\x2c\xd5\x58\x5c\x7f\x2d\x06\xb4\x1e\xf7\x0d\x57\x3f\x1d\x07\xda\xf6\x72\xa4\x57\x98\xd6\x61\x3f\xed\x5a\xca\x13\x6d\x73\x62\xe2\x11\x3f\x71\xe0\x0d\xaf\x25\xde\xf5\x5b\x22\x82\x86\x17\x14\xa0\x9d\xcd\xb2\xf8\x80\xca\x1e\xdc\x94\x1a\x1f\x54\x11\xc0\x5a\x35\x16\xc0\x3a\x35\x19\xc0\x90\x2a\xf8\xac\x57\x9b\x03\x18\x56\x97\x06\xb0\x41\xed\x08\x60\x44\xbd\x3c\x80\x8d\xaa\x1e\xc0\x26\x75\x55\x00\x9b\xd5\xae\x00\xae\x53\x7b\x18\xdc\x1d\x05\xe2\x5b\xd4\x81\x20\x65\xab\x7a\x43\x00\xdb\xd4\xbd\x01\x6c\x57\xc7\x02\xd8\xa1\x8e\x07\xb0\x53\x3d\x14\xc0\x2e\xf5\x70\x00\xbb\xd5\x4f\x06\xb0\x47\x3d\xc6\xe0\x01\x2a\x74\xaf\x9a\x0d\x60\x54\x75\x03\xb3\x7d\xea\xa9\x00\x6e\x54\xe7\x02\xd8\xaf\x3e\xd4\xa9\x93\xfd\x01\x35\x79\x66\x59\x92\x02\x96\xf8\xa8\xa7\xc1\x6b\x62\xea\xdc\xf8\xb8\xfa\x44\xe0\x77\x93\x7a\x36\x80\x83\xea\xaf\x75\x5a\xe4\x70\xb3\x9a\x3c\xb7\x2c\x49\x01\x4b\xfc\x51\x8c\x69\x0b\xfa\x33\x2e\xc4\x63\x68\x78\x3c\xca\xfb\x76\x24\xee\x6a\xcc\xe9\x29\x72\x9a\xd2\x10\xc0\xb4\x16\x09\xe0\x2e\xcd\xeb\xe8\xf3\x04\x33\x5a\x22\x80\x59\xad\x2e\x80\xbb\xb5\x64\x00\xf7\x68\xf5\x0c\x5e\x26\x38\xae\x35\x04\x70\xaf\xa6\x06\x70\x9f\xa6\x2d\xbf\x96\x22\x27\xb4\xe6\xcb\xf5\xf8\x09\x6d\xf9\x46\xa2\x93\x1a\xae\x48\xc6\x4f\x7a\xb5\xfb\x53\x52\x3e\xcd\x6b\xc7\xe0\x7e\x2d\x86\xe5\x69\x8a\x9d\xd2\x70\x85\x1e\x3f\xa5\x05\x9d\x70\x9a\x1b\x32\x78\x40\x6b\x86\x30\x62\x1f\xd4\x06\x82\x4c\x3e\xab\x0d\x41\xfb\x4a\x8c\xcf\xd5\x0e\x6f\x91\x88\x68\x2f\xf8\x4a\x2b\x53\x92\x8a\xf6\x14\x57\x12\x9d\xda\xbb\xfe\xaa\xb1\x5c\x7b\xdd\xb7\xbb\xd2\xf3\x4c\x36\xfc\x38\xc6\xdb\x75\x2c\x3e\x27\x8c\xff\x07\xc5\x39\xf3\x59\x71\xce\xfc\x82\x38\x67\x1e\x12\xe7\xcc\xc3\xe2\x9c\xf9\x45\x71\xce\x9c\xe1\x73\x86\xdd\xde\x23\xe2\x9c\x79\x94\x4f\x06\x06\x9f\x17\x27\xc3\x17\xd4\xa1\xc0\xe7\x31\x75\x24\x48\xf9\x25\x75\x2f\x1a\x7e\x23\xce\xd7\x59\xbd\x2e\x11\xf3\x87\x5e\x5d\x1d\x82\x78\x32\x19\xc4\xeb\x9b\x83\x38\xeb\xd5\x2f\xfe\x9b\xe2\xdd\x20\x80\x43\x51\xef\xdf\xd9\x18\x6a\x0b\x58\x84\x6f\x2c\xae\x04\x62\xe7\xf9\x0b\xbf\xbf\xfc\x36\xf1\x38\xbd\xfc\x77\xf0\x38\x2d\x4e\x57\xf0\xf8\x31\x00\xd7\xf2\xf8\x49\x00\x43\x3c\x4e\xab\xf8\x0e\x1e\xbf\x00\x60\x1f\x8f\xff\x23\xdb\xa0\xf1\xfc\x15\xe0\x0e\x3f\x7f\x05\x28\xf9\xf9\x2b\xc0\xb4\x9f\xbf\x02\x9c\xe0\x0b\xf8\x49\x05\xb8\xdf\xb7\x8f\x00\x9f\xf1\xed\x23\xc0\xa3\xbe\x7d\x04\x78\xdc\xaf\x4f\xc4\xab\x07\xab\x4f\xc4\x7b\x2f\x61\xf5\x89\x00\xcf\xfa\xf5\x89\x00\xdf\xf0\xeb\x13\x05\xfe\x90\x46\x0a\xe5\x1f\x05\xfe\x9c\xc7\xcf\x46\x81\xbf\xf3\xcb\x8d\x01\x6f\xf8\xe5\xc6\xbc\x17\x19\x56\x2e\x6f\x4f\x7a\x34\x9d\x8c\x01\xff\x03\xa0\x81\xca\x8a\x01\xb4\xb7\x65\xf9\xd3\x2b\x06\x8f\xeb\x71\xcf\x9e\xd6\x81\xed\x71\xa0\xc5\x7b\x11\x62\xdd\xd8\xe9\xc5\x95\x98\xbf\xe9\xe2\xe3\xd8\xff\x49\xf0\xf6\x58\xfd\x31\xec\xfc\x6e\x56\x80\x38\xd5\x6d\x93\x02\xd4\x63\xc1\xc5\xd6\x91\x1b\x78\xf9\xd4\xf7\xfb\x78\xbe\xc9\xda\x46\x3b\xf0\x37\x15\xa0\x31\xe4\xdf\x19\xd8\x34\xd2\x78\xc9\xf2\x4d\x62\x7e\x61\xfd\x94\xa2\xc7\x2a\x3d\x1c\xbb\x63\xec\x1e\x62\x4b\x01\xac\x8f\x05\xf5\xdc\xc4\xe3\x74\x3f\xd7\xf3\x38\xd5\x61\x3f\x8f\xd3\x78\x3b\xca\xe3\x34\xde\xb2\x9e\xa3\xb6\x84\x8f\xe1\x92\xc7\xec\x38\x21\x89\xda\x39\x02\x6b\x93\x16\xa1\x4d\x1c\xee\xb7\x94\xfb\x1d\x8f\xb1\x90\xaa\x8f\x56\xee\x44\x26\xa7\x04\xdd\x7f\xe4\x93\xcf\x83\x9e\x3f\x0d\x0f\x3c\x2e\xc4\x85\x97\xf4\x9f\xb1\xad\x1f\xdf\x24\x5d\xba\x0f\xf2\xb6\xcc\xa1\x2d\xd3\xa5\x1b\xee\x60\xbb\xe5\x6d\xa8\x24\xbb\x2d\xa7\xc0\xf6\xd5\x14\x0d\x76\xdc\xb4\x3d\xb2\xdc\xc1\xff\xdb\xb1\x42\xff\xa5\xc7\x12\x76\xc9\xd5\x6b\xb9\x76\x39\x6e\x75\x2a\xe3\xea\xb5\x1e\xd5\xaf\x71\x0a\xe9\x6e\xd4\xdb\x39\xbd\x8b\x1d\x0b\xe4\xcd\x62\xae\xcb\x29\xa4\x7b\xf4\x72\x2e\xe7\x58\x6e\x39\xe7\xfb\x58\x6e\x3e\x9f\xad\xf6\xe8\x79\xaf\x07\xbb\xbb\xf5\x95\x5b\xf4\x5d\x87\xf6\x1a\xe3\xc6\xe8\x78\x37\xea\xf9\x11\xc1\x6d\x03\xb7\xeb\x5b\xf4\x75\x6b\x37\x7b\x99\x3a\x85\x74\xef\x56\x7f\xc8\xe8\x5b\xb6\xe8\xe3\x3b\xae\xbf\x71\xd7\x21\xe3\xc0\x2d\x87\xf6\x1c\x18\xdd\xbf\xa7\x5b\xbf\x07\xf5\xf5\x54\xc9\xaa\xe5\xea\x5b\xf4\x4b\xcf\x28\xbc\xda\xb0\xbd\xb7\x7e\xed\x25\xb5\xb2\x2b\xac\x52\x59\xda\x7a\x77\xf7\xe8\xab\xfd\x5a\x0c\xde\xde\xa3\x0f\x75\x6f\xfe\x69\xe4\xed\x48\xf3\x66\xfb\x55\x9e\x71\xe8\xec\xa4\x6b\x75\xed\x84\xa7\x47\xe7\x8e\xdd\xbc\x4d\x56\x32\xbf\x6e\xd4\xd7\x1b\x86\x33\x5b\xca\x18\x39\xcb\xcd\xe4\x0d\xb3\x94\x35\xcc\x6c\xb6\x6b\x35\x4b\xee\xdd\x1a\x6c\x7e\x7b\x74\xd6\x8c\x45\xab\xc4\xee\xe8\x43\xbd\xc4\x7d\x72\x8f\x3e\xf8\xd1\x0e\xc1\x76\xfb\xff\x53\x8c\xe7\x47\xc5\xdc\xbb\xe0\x34\x8a\xad\x10\x1f\xff\x20\x2b\x38\x0e\xf3\xce\x49\xfc\xb3\x2c\x3f\x9c\x34\x2b\x4e\xe8\x04\xa3\x76\x86\x40\xef\x02\x5d\xc2\x3a\x46\xff\xc6\x94\x60\xc7\xef\x87\xb4\xd6\x4f\x2b\xc1\x02\xda\xcc\xff\x91\xb6\x94\x6b\xf7\x29\xc0\x1f\x90\xc1\x8c\x67\x4f\xfc\xba\x02\x24\xe6\x3c\x5b\x91\x75\xce\xab\x23\x40\xe3\x59\xef\xb0\xf6\x3e\xe1\x80\x73\x84\xf3\x48\x04\x48\x9d\xf3\xd6\x7c\x9f\x13\xe7\x80\xbd\x9c\x4d\xf2\x7f\x06\x98\xe3\xfc\xfb\xc4\x17\x80\xbf\xe0\xdc\x19\x05\x1a\x5e\xf5\x9e\xcb\xc4\x63\x51\x20\xf1\x3d\xe0\xa2\x98\xff\x9b\xde\xa2\x5f\xcb\xff\x4d\x6f\xef\x4b\x7c\x24\x0a\x0c\xbe\x05\x34\x0b\x1c\x7d\xcb\x7b\x3f\x21\xfe\x1c\xf1\xdb\xc0\x00\xe7\x0b\x64\x7f\x11\x18\x11\x38\x7a\x11\xd8\xcb\xf9\xbf\x88\xdf\xf7\x0e\x3a\x88\xd7\xd0\xf3\x44\xad\x6d\xb4\xe7\xe7\xe7\xe7\x63\x48\x22\x79\x3c\x55\x6b\x56\xff\xf2\xbb\xa2\x8b\x76\xa7\x78\x89\xbd\xea\x2a\x3f\xd1\x1a\xa1\x28\xec\xf1\x46\xbd\xd3\x3f\xe5\x54\xfb\xed\x52\xa6\x38\x95\xb5\x68\x3d\xa3\x8e\xc6\x02\xd1\x74\x26\x7b\x27\xac\x92\x55\xb5\x33\x0b\x13\x8a\x76\x69\x6a\x06\x6c\x64\xe4\xad\x62\xc5\xaa\x3a\x7d\x79\xca\x73\xe1\x8a\x18\x01\x2d\x8a\xbd\xc5\xe2\xf0\x50\x5f\x9e\x1e\xa3\x81\x3d\x0d\x5d\xee\x43\xb6\x79\x7a\x5e\xd2\x48\x76\xbc\xa8\x98\x4f\x9e\x9d\x1d\xc4\x22\xa8\x8f\xd4\xde\x52\x56\x28\xf1\x44\xc3\x55\x09\x3d\x7a\x87\x1e\x6f\x4c\x44\xbb\xf4\x38\x12\xd1\xc3\x7a\x3c\x95\x88\x5e\xd3\x17\x4f\x24\x48\x5d\xf9\x99\x44\x74\xfc\xfe\x78\x43\x22\xba\x5e\x8f\x27\xc6\xe2\xa9\xab\x58\xc2\x60\x62\x65\x3c\x9a\xd0\x13\xfd\xf1\xc1\x01\x1e\x51\x56\x45\x22\x50\x16\xfb\x6c\x50\xbb\x9e\x62\x8f\xf4\x77\xe6\x17\x4f\xad\x93\x78\xd5\xe1\x1a\x89\x7e\x9d\x44\xbf\x53\xa2\xbb\x12\x7d\x56\xa2\x3f\x20\xd1\x3f\x27\xd1\x9f\x94\xe8\xbf\x2e\xd1\xcf\x4b\xf4\x17\x25\xfa\x37\x25\xfa\x1f\x4b\xf4\x1f\x48\xf4\x77\x24\xfa\x7f\x4a\xf4\x9f\x48\xf4\xa6\x45\x7b\xbb\xce\x7f\x7d\xbe\x44\x5f\x29\xd1\xaf\x96\xe8\xdd\x12\x7d\xad\x44\xdf\x20\xd1\x77\x49\xf4\xfd\x12\xfd\x36\x89\x9e\x95\xe8\x65\x89\x3e\x23\xd1\xe7\x24\xfa\x19\x89\xfe\xcb\x12\xfd\x57\x25\xfa\x97\x24\xfa\x33\x12\xfd\xb7\x25\xfa\x37\x24\xfa\xcb\x12\xfd\xdb\x12\xfd\x55\x89\xfe\x03\x89\xfe\xaf\x12\xfd\x3f\x24\xfa\xbc\x44\x6f\x88\x2c\xae\x2f\x95\xe8\x2b\x24\xfa\x2a\x89\xbe\x4e\xa2\x6f\x94\xe8\xdb\x24\xfa\x3e\x89\x7e\x50\xa2\x1f\x93\xe8\x96\x44\x77\x24\xfa\x71\x89\x7e\x5a\xa2\x3f\x2c\xd1\xbf\x20\xd1\x9f\x94\xe8\x67\x25\xfa\x57\x24\xfa\x79\x89\xfe\x7b\x12\xfd\x65\x89\xfe\x1d\x89\xfe\x97\x12\xfd\x7b\x12\xfd\x47\x12\xfd\x1d\x89\x9e\x8c\x2e\xae\x6b\x12\xbd\x5d\xa2\xeb\x12\xfd\x2a\x89\x3e\x20\xd1\x47\x24\xfa\x76\x89\x3e\x2a\xd1\x0f\x4a\xf4\xa3\x12\x3d\x2d\xd1\xf3\x12\xfd\x53\x12\xfd\x1e\x89\x7e\x42\xa2\x9f\x96\xe8\x67\x24\xfa\xaf\x48\xf4\x73\x12\xfd\x6b\x21\xfd\xef\xd9\x6f\x14\x73\x21\xcb\xbf\xe6\xfa\x2b\x21\xfd\x4f\xb8\x3e\x10\x5a\xc7\xbe\xc9\xf5\xf1\x45\xd6\xb7\x28\x16\xad\x0c\xa2\xb5\xaf\x89\x61\xbd\x5e\xa2\x2f\x91\xe8\x2d\x97\x68\x36\xfb\x1c\x93\xa8\xb1\x7f\x64\xf4\xef\xec\x68\x26\xa8\x8f\xff\xde\xfc\x09\x66\x1f\xaf\xe9\xfe\xfb\xf5\x6b\x3c\x24\xb3\x02\x3f\x12\x02\x3f\xae\xcb\x09\x1f\xc0\x1a\xe0\x7d\xf2\xba\x4c\x60\x2a\xa5\x4d\xe0\x3c\xff\xdb\x0e\x9f\xa9\x4e\x2b\x84\xfc\xb3\xfc\x78\xd4\x4f\xa7\xda\x6c\x08\x95\xbf\x5d\x48\xa7\xb2\xf7\x0a\x4c\x75\x3b\x24\x70\x92\x1f\x81\xf9\x4c\xad\x5a\x14\xb8\xc1\xdb\x8d\xd5\x38\xc5\xff\x6e\xc4\x67\x7a\xcb\x7d\x48\xe0\x46\x00\x4f\x08\xf5\xa1\x36\xfe\x4d\x21\x5d\x03\xf0\x9c\xc0\x4d\x00\x5e\x10\x98\xb6\x79\xff\x22\x30\xf5\xe6\x7b\x02\x53\xdb\xcd\x0b\x4c\xbd\x7a\xa5\xb2\xb0\x7d\x7a\x95\x20\x9d\xfa\x68\x44\x60\x0b\xc0\x75\x02\xb7\x05\xc7\x93\x8c\x5b\x01\xdc\x2a\xf0\x5a\x7e\x44\x29\xfa\x5b\x02\x1f\x05\x50\x09\x95\x7f\x6f\xc8\xfe\xd3\x02\x1f\x01\xf0\x70\xc8\xfe\xc9\x90\xfd\x53\x21\xfb\x17\x05\x3e\x4c\xf3\x48\xe0\x76\x00\x7f\x25\x70\x07\x80\x7f\x10\xb8\x13\xc0\x5b\x02\xd3\xd8\xfa\x6f\x81\x97\xd3\x98\x88\x04\x7c\x39\xb5\xa9\xc0\x57\xf0\xa3\x71\x9f\x69\x2c\xf6\x0a\x7c\x25\x80\x4d\x02\xd3\xb6\x7c\x8f\xc0\x2b\x69\xbc\x09\x4c\x73\xc8\x14\xf8\x2a\x00\x25\x81\x57\x01\xb8\x47\xe0\xab\x01\xcc\x09\xbc\x1a\xc0\x63\x02\xaf\x01\xf0\xb4\xc0\x5d\x00\x9e\x15\xb8\x9b\xda\x4f\x60\xda\x7b\x7d\x5b\x60\x9a\x4b\x7f\x2b\x70\x0f\x80\xd7\x05\xee\x05\xf0\xb6\xc0\x7d\x00\x3e\x10\xb8\x9f\xc2\x68\xc0\x03\x54\x27\x81\x07\x01\xac\x17\x78\x14\xc0\x4e\x81\xc7\x00\x1c\x10\xf8\xe7\x68\xfe\x09\xbc\x9f\xe6\x93\xc0\x34\x97\xbf\x14\x5d\x38\x3e\x7f\x4b\xe0\xf5\x34\x9f\x04\x1e\x06\xf0\x8a\xc0\xb4\x56\xfc\x8d\xc0\x9b\x00\xfc\x93\xc0\x9b\x01\xfc\x58\x60\xda\x93\xbe\x2f\xf0\x16\x5a\x23\x62\x01\x6f\xa3\x39\x24\x30\xad\x3d\xdb\x04\xde\x41\xf7\x28\xf0\xf5\xb4\xc6\x09\x7c\x03\x80\x29\x81\x77\xf1\x23\x72\x9f\x77\x03\x78\x44\xe0\x3d\x00\xbe\x2c\xf0\x10\x80\xaf\x0a\xbc\x0e\xc0\xd7\x04\xde\x48\xfd\x2f\xf0\x08\x80\x6f\x09\xbc\x95\xe6\x8f\xc0\x3b\x01\x7c\x5f\xe0\x1b\x01\xfc\xb3\xc0\xfb\x68\x3c\x08\xfc\xf3\x34\x9f\x04\x3e\x40\xf3\x29\xbe\x70\xfc\xb5\x08\x9c\x10\x3e\xd5\xf8\xf3\xaf\x57\x60\x9a\xaf\x9b\x04\xa6\xf9\xb5\x47\xe0\x71\x9a\x4f\x02\xdf\x44\xf3\x49\xe0\x83\x34\x9f\x04\xbe\x99\xe6\x93\xc0\xb4\xf6\xcf\x09\x7c\x0b\xcd\x27\x81\x6f\x05\x70\x4e\x60\x83\xfd\x41\x40\xc0\xb7\x51\x7b\x0a\xfc\x49\x1a\x5f\x02\xdf\x0e\xe0\x55\x81\xef\xa0\x3e\x12\x1e\xed\xf4\x3c\x18\x13\xb8\xc0\xfb\xd0\xbf\xb2\xc2\xf3\xca\xe7\xc3\x21\xce\x87\x78\x26\xc4\x73\x21\x7e\x22\xc4\xe7\x42\xfc\xf5\x10\xbf\x12\xe2\xd7\x42\xfc\x66\x88\x2f\x86\x38\xa9\x2c\xe4\x8e\x10\x77\x85\x78\x24\xc4\x7b\x43\x7c\x38\xc4\xf9\x10\xcf\x84\xd8\x7f\x2f\x69\xe0\x7f\x23\xea\x7f\xaa\xf5\x9f\x37\x7f\x16\xe2\x3b\x0b\x36\xfa\xb2\x56\x7a\x6a\xc2\x30\xd3\xe9\xaa\x35\x8d\x3e\xd7\x9a\x71\xd1\x57\xb5\x8a\x7d\x3b\x0f\xed\xee\x23\x08\xce\x88\xd9\x69\x30\xb7\x77\xdc\xaa\x1f\x9d\x34\x33\x76\x29\x57\xf6\xbc\x3c\xc9\xe3\x62\x71\x7a\xd2\x30\xb3\xd9\xaa\x63\x4f\x04\x67\xcb\x82\x59\xd1\x2e\x2d\xe0\x5c\xd5\x9c\xb4\xfc\x6c\x8b\xe5\x4c\xe8\x04\xb1\xcf\x71\xab\xae\x99\x46\x9f\x33\x3b\xc9\x42\x5e\x4d\x8c\xed\xdc\x39\x60\x8c\x78\xc1\x06\x2f\x18\xf2\x82\x75\xcc\xc8\xff\xa8\x13\x7c\xe6\xf9\xe9\x5c\xcf\x08\x9f\xb7\xc5\x6b\x1d\x7f\x51\x7b\x2f\xa4\x87\x5f\x7f\x9b\xb8\x96\x08\xe9\xdb\x25\xe5\xc5\x42\xfc\xc6\x47\xf8\x1f\x0b\x15\x18\x7e\xa3\xfe\x21\x2e\xf9\x84\xcb\xae\xca\x27\xbc\x90\xff\x59\x2f\x7b\x57\x8a\x0a\xfe\xbe\xde\xc3\xcb\x0f\xb7\xc1\x59\x5e\x6e\xf8\x1c\x3a\x5c\xff\x3b\x25\xfe\xcf\x29\x8b\xdb\x87\xdb\x6f\x90\x6b\x03\x21\xfd\xeb\xdc\xf0\x42\x74\x71\x7f\x3f\xfc\xfc\x22\x79\xd2\x35\xc3\xd7\xb1\x2f\x7e\x44\xf9\x8a\xc4\xbf\x9d\x77\x48\x5e\xf9\x70\xff\x03\x12\xff\x13\xfc\x08\xf9\x87\xf1\x0f\xf7\xbf\x51\xd2\x7f\x27\xfd\xfe\xe3\xf9\xb4\x09\xef\xfc\x10\xfa\xef\x3a\x49\xf9\xc7\x1a\x17\x2f\x2f\xcc\x17\x24\xfe\x26\xf7\x57\x93\x1f\xee\xff\xa2\xa4\xfe\x67\xba\xbd\xd0\xff\x53\x84\x36\xbe\xbf\x08\xd7\xbf\x53\x52\xfe\x24\xff\xee\x1e\x3e\x9f\x0c\xdb\xb6\x4a\xca\x3f\xcf\xcb\xf7\xf7\xab\x6d\x7c\xae\x86\xcb\x7f\x40\x52\xfe\x45\xe1\xff\x11\x88\x57\x78\xfe\xdd\x2f\x29\xdf\xdf\xe8\x89\xf7\xbf\x64\x91\xf2\xa7\x25\xe5\xeb\xed\x5e\xd8\xf3\x11\xf7\x5f\x95\x94\xaf\x5f\xbb\xb0\x9c\x36\xbe\xdf\x0a\x97\x4f\xef\x04\xd1\xb1\xf9\x32\xff\x0b\x8a\xda\x35\xc0\xfd\xa3\x82\xff\x62\xe5\x3f\xc7\xf7\xc5\xe1\x6b\x9c\x3f\xb8\xf4\x86\xc0\xcf\x16\xca\xf7\x9f\x6b\xff\x1b\x00\x00\xff\xff\xcf\xed\x6f\x29\xf0\x31\x00\x00")

func netcostBpfOBytes() ([]byte, error) {
	return bindataRead(
		_netcostBpfO,
		"netcost-bpf.o",
	)
}

func netcostBpfO() (*asset, error) {
	bytes, err := netcostBpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "netcost-bpf.o", size: 12784, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"netcost-bpf.o": netcostBpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"netcost-bpf.o": &bintree{netcostBpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

